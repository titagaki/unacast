{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/main/ReadIcons.ts","webpack:///./src/main/bouyomi-chan/index.ts","webpack:///./src/main/const.ts","webpack:///./src/main/getRes.ts","webpack:///./src/main/jpnkn/index.ts","webpack:///./src/main/main.ts","webpack:///./src/main/niconama/index.ts","webpack:///./src/main/readBBS/Read5ch.ts","webpack:///./src/main/readBBS/readSitaraba.ts","webpack:///./src/main/startServer.ts","webpack:///./src/main/util.ts","webpack:///./src/main/youtube-chat/index.ts","webpack:///./src/main/youtube-chat/live-chat.ts","webpack:///./src/main/youtube-chat/parser.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main/main.ts\");\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * アイコン表示に関するモジュール\r\n * シングルトン\r\n */\r\nvar fs_1 = __importDefault(require(\"fs\"));\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('ReadIcons');\r\nvar randomIconList;\r\nvar idIconList;\r\n/**\r\n * コンストラクタ\r\n * ・ランダムフォルダからアイコン名を取得してリスト化\r\n * ・IDフォルダからもリスト化、空の対応マップ作製\r\n * ・コテハン対応ファイルを読みこんでmapに格納\r\n */\r\nvar ReadIcons = /** @class */ (function () {\r\n    function ReadIcons() {\r\n        /**\r\n         * アイコンランダム表示機能（デフォルト）\r\n         * 起動時に作成したアイコンリストからランダムで1つ取得\r\n         */\r\n        this.getRandomIcons = function () {\r\n            var iconPath = '';\r\n            try {\r\n                var dirName = './img/random/';\r\n                // リストからランダム取得\r\n                //  const size = randomIconList.size;\r\n                var num = Math.floor(randomIconList.length * Math.random());\r\n                iconPath = dirName + randomIconList[num];\r\n            }\r\n            catch (e) {\r\n                log.error(e);\r\n            }\r\n            return iconPath;\r\n        };\r\n        //画像ディレクトリ\r\n        var randomDir = path_1.default.resolve(__dirname, \"../public/img/random/\");\r\n        log.debug('loadRandomDir = ' + randomDir);\r\n        //  ランダムアイコン取得\r\n        randomIconList = readDir(randomDir);\r\n        // ID用アイコンディレクトリ(未使用)\r\n        var idDir = path_1.default.resolve(__dirname, \"../public/img/id/\");\r\n        log.debug('loadIDDir = ' + idDir);\r\n        //  ランダムアイコン取得\r\n        idIconList = readDir(idDir);\r\n    }\r\n    return ReadIcons;\r\n}());\r\nvar readDir = function (imgDir) {\r\n    var iconFileList = [];\r\n    //  指定したディレクトリのアイコン取得\r\n    var files = fs_1.default.readdirSync(imgDir, { withFileTypes: true });\r\n    //pngファイルのみ返却リストに格納する\r\n    files.forEach(function (file) {\r\n        // asar圧縮するとfileが文字列になる。開発環境だとfileオブジェクトになる\r\n        var target = typeof file.name !== 'string' ? file : file.name;\r\n        var regx = /.*\\.png$/.test(target);\r\n        if (regx) {\r\n            iconFileList.push(target);\r\n        }\r\n    });\r\n    return iconFileList;\r\n};\r\nexports.default = new ReadIcons();\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar net_1 = __importDefault(require(\"net\"));\r\nvar BouyomiChan = /** @class */ (function () {\r\n    function BouyomiChan(options) {\r\n        /**\r\n         * 棒読みちゃんのホスト\r\n         */\r\n        this.host = 'localhost';\r\n        /**\r\n         * 棒読みちゃんのポート番号\r\n         */\r\n        this.port = 50001;\r\n        /**\r\n         * 速度（-1:棒読みちゃん画面上の設定）\r\n         */\r\n        this.speed = -1;\r\n        /**\r\n         * 音程（-1:棒読みちゃん画面上の設定）\r\n         */\r\n        this.tone = -1;\r\n        /**\r\n         * 音量（-1:棒読みちゃん画面上の設定）\r\n         */\r\n        this.volume = -1;\r\n        /**\r\n         * 声質（ 0:棒読みちゃん画面上の設定、1:女性1、2:女性2、3:男性1、4:男性2、5:中性、6:ロボット、7:機械1、8:機械2、10001～:SAPI5）\r\n         */\r\n        this.type = 0;\r\n        /**\r\n         * 読み上げの際先頭に付加する文字列\r\n         */\r\n        this.prefix = '';\r\n        if (!options)\r\n            return;\r\n        if (options.host)\r\n            this.host = options.host;\r\n        if (options.port)\r\n            this.port = options.port;\r\n        if (options.speed)\r\n            this.speed = options.speed;\r\n        if (options.tone)\r\n            this.tone = options.tone;\r\n        if (options.volume)\r\n            this.volume = options.volume;\r\n        if (options.type)\r\n            this.type = options.type;\r\n        if (options.prefix)\r\n            this.prefix = options.prefix;\r\n    }\r\n    /**\r\n     * @param message 棒読みちゃんに読み上げてもらう文章\r\n     */\r\n    BouyomiChan.prototype.speak = function (message) {\r\n        /** 読み前に文字列を処理する */\r\n        var concatMessage = this.prefix.concat(message);\r\n        /** 棒読みちゃんに送信する設定のバイト長 */\r\n        var SETTINGS_BYTES_LENGTH = 15;\r\n        var messageByteLength = Buffer.byteLength(concatMessage);\r\n        var bufferLength = SETTINGS_BYTES_LENGTH + messageByteLength;\r\n        var buff = Buffer.alloc(bufferLength);\r\n        /** メッセージ読み上げコマンド */\r\n        var COMMAND_TO_SPEAK = 1;\r\n        var len = buff.writeUInt16LE(COMMAND_TO_SPEAK);\r\n        len = buff.writeInt16LE(this.speed, len);\r\n        len = buff.writeInt16LE(this.tone, len);\r\n        len = buff.writeInt16LE(this.volume, len);\r\n        len = buff.writeUInt16LE(this.type, len);\r\n        /** 文字コード(0:UTF-8, 1:Unicode, 2:Shift-JIS) */\r\n        var ENCODING = 0;\r\n        len = buff.writeUInt8(ENCODING, len);\r\n        len = buff.writeUInt32LE(messageByteLength, len);\r\n        len = buff.write(concatMessage, len);\r\n        var client = net_1.default.createConnection(this.port, this.host);\r\n        client.write(buff);\r\n        client.end();\r\n    };\r\n    return BouyomiChan;\r\n}());\r\nexports.default = BouyomiChan;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.electronEvent = void 0;\r\nexports.electronEvent = {\r\n    /** サーバー起動 */\r\n    START_SERVER: 'start-server',\r\n    /** サーバー停止 */\r\n    STOP_SERVER: 'stop-server',\r\n    /** Config適用 */\r\n    APPLY_CONFIG: 'apply-config',\r\n    /** アラート表示 */\r\n    SHOW_ALERT: 'show-alert',\r\n    SAVE_CONFIG: 'save-config',\r\n    /** 棒読み再生 */\r\n    PLAY_TAMIYASU: 'play-tamiyasu',\r\n    /** レス着信音再生 */\r\n    PLAY_SOUND_START: 'play-sound-start',\r\n    PLAY_SOUND_END: 'play-sound-end',\r\n    WAIT_YOMIKO_TIME: 'wait-yomiko-time',\r\n    SPEAKING_END: 'speaking-end',\r\n    /** コメント表示 */\r\n    SHOW_COMMENT: 'show-comment',\r\n    /** コメント欄初期化 */\r\n    CLEAR_COMMENT: 'clear-comment',\r\n    /** 翻訳コメント表示 */\r\n    SHOW_COMMENT_TL: 'show_comment_translate',\r\n    /** サーバー起動の返信 */\r\n    START_SERVER_REPLY: 'start-server-reply',\r\n    /** 強制的に端にスクロール */\r\n    FORCE_SCROLL: 'FORCE_SCROLL',\r\n    /** ステータス更新 */\r\n    UPDATE_STATUS: 'UPDATE_STATUS',\r\n    /** コメントテスト */\r\n    COMMENT_TEST: 'COMMENT_TEST',\r\n    /** 画像プレビュー */\r\n    PREVIEW_IMAGE: 'PREVIEW_IMAGE',\r\n};\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.threadUrlToBoardInfo = exports.postResponse = exports.getThreadList = exports.getRes = void 0;\r\nvar axios_1 = __importDefault(require(\"axios\"));\r\nvar iconv_lite_1 = __importDefault(require(\"iconv-lite\")); // 文字コード変換用パッケージ\r\nvar express_1 = __importDefault(require(\"express\"));\r\nvar body_parser_1 = __importDefault(require(\"body-parser\")); // jsonパーサ\r\nvar router = express_1.default.Router();\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('bbs');\r\nvar ReadIcons_1 = __importDefault(require(\"./ReadIcons\")); //アイコンファイル名取得\r\nvar startServer_1 = require(\"./startServer\");\r\nvar util_1 = require(\"./util\");\r\nvar readSitaraba_1 = __importStar(require(\"./readBBS/readSitaraba\")); // したらば読み込み用モジュール\r\nvar Read5ch_1 = __importStar(require(\"./readBBS/Read5ch\")); // 5ch互換板読み込み用モジュール\r\nvar sitaraba = new readSitaraba_1.default();\r\nvar read5ch = new Read5ch_1.default();\r\n// 掲示板読み込みモジュール、一度決定したら使いまわすためにグローバル宣言\r\nvar bbsModule = null;\r\n// リクエストのbodyをパース下りエンコードしたりするためのやつ\r\nrouter.use(body_parser_1.default.urlencoded({ extended: true }));\r\nrouter.use(body_parser_1.default.json());\r\n/**\r\n * ブラウザからの初期処理リクエスト\r\n */\r\nrouter.get('/', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var threadUrl, resNum, result, doms;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                log.info('access /');\r\n                threadUrl = globalThis.config.url;\r\n                resNum = globalThis.config.resNumber ? Number(globalThis.config.resNumber) : NaN;\r\n                log.info(\"threadUrl=\" + threadUrl + \" resNum=\" + resNum);\r\n                if (!resNum) {\r\n                    res.send(JSON.stringify([]));\r\n                    return [2 /*return*/];\r\n                }\r\n                res.header('Content-Type', 'application/json; charset=UTF-8');\r\n                return [4 /*yield*/, exports.getRes(threadUrl, resNum)];\r\n            case 1:\r\n                result = _a.sent();\r\n                result = result.filter(function (item) { return item.from !== 'system'; });\r\n                doms = util_1.judgeAaMessage(result).map(function (item) { return startServer_1.createDom(item, 'server', item.isAA); });\r\n                res.send(JSON.stringify(doms));\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); });\r\n/**\r\n * 掲示板のレスを取得する\r\n * @param threadUrl スレのURL\r\n * @param resNum この番号以降を取得する。指定しない場合は全件取得\r\n */\r\nvar getRes = function (threadUrl, resNum) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var response, e_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 2, , 3]);\r\n                // リクエストURLを解析し、使用するモジュールを変更する\r\n                bbsModule = analysBBSName(threadUrl);\r\n                return [4 /*yield*/, bbsModule.read(threadUrl, resNum)];\r\n            case 1:\r\n                response = _a.sent();\r\n                globalThis.electron.threadConnectionError = 0;\r\n                log.info(\"fetch \" + threadUrl + \" resNum = \" + resNum + \", result = \" + response.length + \" lastResNum=\" + (response.length > 0 ? response[response.length - 1].number : '-'));\r\n                return [2 /*return*/, response.map(function (res) {\r\n                        return __assign(__assign({}, res), { imgUrl: ReadIcons_1.default.getRandomIcons() });\r\n                    })];\r\n            case 2:\r\n                e_1 = _a.sent();\r\n                log.error(e_1);\r\n                // エラー回数が規定回数以上かチェックして、超えてたら通知する\r\n                if (globalThis.config.notifyThreadConnectionErrorLimit > 0) {\r\n                    globalThis.electron.threadConnectionError += 1;\r\n                    if (globalThis.electron.threadConnectionError >= globalThis.config.notifyThreadConnectionErrorLimit) {\r\n                        log.info('エラー回数超過');\r\n                        globalThis.electron.threadConnectionError = 0;\r\n                        return [2 /*return*/, [\r\n                                {\r\n                                    name: 'unacastより',\r\n                                    imgUrl: './img/unacast.png',\r\n                                    text: '掲示板が規定回数通信エラーになりました。設定を見直すか、掲示板URLを変更してください。',\r\n                                    from: 'system',\r\n                                },\r\n                            ]];\r\n                    }\r\n                }\r\n                return [2 /*return*/, []];\r\n            case 3: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexports.getRes = getRes;\r\n/*\r\n * URLをみてどこのBBSか判定して使用するモジュールを返却する\r\n */\r\nvar analysBBSName = function (threadUrl) {\r\n    // したらばドメイン名\r\n    var sitarabaDomain = 'jbbs.shitaraba.net';\r\n    if (threadUrl.indexOf(sitarabaDomain) !== -1) {\r\n        // URLにしたらばドメイン名が入ってればしたらば\r\n        return sitaraba;\r\n    }\r\n    // どこにも該当しなかったらとりあえず5chで\r\n    // この辺も対応ドメインリストとか作ってちゃんと判定したほうがよさそう\r\n    return read5ch;\r\n};\r\nvar getThreadList = function (boardUrl) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var sitarabaDomain;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                sitarabaDomain = 'jbbs.shitaraba.net';\r\n                if (!(boardUrl.indexOf(sitarabaDomain) !== -1)) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, readSitaraba_1.readBoard(boardUrl)];\r\n            case 1: \r\n            // URLにしたらばドメイン名が入ってればしたらば\r\n            //\r\n            return [2 /*return*/, _a.sent()];\r\n            case 2: return [4 /*yield*/, Read5ch_1.readBoard(boardUrl)];\r\n            case 3: return [2 /*return*/, _a.sent()];\r\n        }\r\n    });\r\n}); };\r\nexports.getThreadList = getThreadList;\r\n/** レスを投稿 */\r\nvar postResponse = function (hostname, threadNumber, boardId, message) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var sitarabaDomain;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                log.info(\"[postResponse] \" + hostname + \" \" + threadNumber + \" \" + boardId);\r\n                sitarabaDomain = 'jbbs.shitaraba.net';\r\n                if (!(hostname.indexOf(sitarabaDomain) !== -1)) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, readSitaraba_1.postRes(hostname, threadNumber, boardId, message)];\r\n            case 1: \r\n            // URLにしたらばドメイン名が入ってればしたらば\r\n            return [2 /*return*/, _a.sent()];\r\n            case 2: return [4 /*yield*/, Read5ch_1.postRes(hostname, threadNumber, boardId, message)];\r\n            case 3: return [2 /*return*/, _a.sent()];\r\n        }\r\n    });\r\n}); };\r\nexports.postResponse = postResponse;\r\n/**\r\n * スレのURLから板情報を取得\r\n * @param threadUrl スレのURL\r\n */\r\nvar threadUrlToBoardInfo = function (threadUrl) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var sitarabaDomain, result, boardUrl, tempUrl, encoding, options, response, str, e_2;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                sitarabaDomain = 'jbbs.shitaraba.net';\r\n                result = {\r\n                    status: 'ng',\r\n                    boardUrl: threadUrl,\r\n                    boardName: '★取得失敗★',\r\n                };\r\n                boardUrl = '';\r\n                tempUrl = threadUrl;\r\n                tempUrl = tempUrl.replace(/\\/l\\d+$/, '/');\r\n                if (!tempUrl.match(/.*\\/$/)) {\r\n                    tempUrl += '/';\r\n                }\r\n                encoding = '';\r\n                if (tempUrl.indexOf(sitarabaDomain) !== -1) {\r\n                    // スレ: https://jbbs.shitaraba.net/bbs/read.cgi/game/51638/1581839266/\r\n                    // 板: https://jbbs.shitaraba.net/game/51638/\r\n                    // 設定: https://jbbs.shitaraba.net/bbs/api/setting.cgi/game/51638/\r\n                    encoding = 'EUC-JP';\r\n                    // 板かスレか判定\r\n                    if (tempUrl.match('read.cgi')) {\r\n                        // スレ\r\n                        tempUrl = tempUrl.replace('jbbs.shitaraba.net/bbs/read.cgi/', '').replace(/https?:\\/\\//, '');\r\n                        tempUrl = tempUrl.match(/(.+)\\/.+\\/$/)[1] + '/';\r\n                        boardUrl = \"http://jbbs.shitaraba.net/\" + tempUrl;\r\n                        tempUrl = \"http://jbbs.shitaraba.net/bbs/api/setting.cgi/\" + tempUrl;\r\n                    }\r\n                    else {\r\n                        // 板\r\n                        boardUrl = tempUrl;\r\n                        tempUrl = tempUrl.replace('jbbs.shitaraba.net/', '').replace(/https?:\\/\\//, '');\r\n                        tempUrl = \"http://jbbs.shitaraba.net/bbs/api/setting.cgi/\" + tempUrl;\r\n                    }\r\n                }\r\n                else {\r\n                    // スレ: https://bbs.jpnkn.com/test/read.cgi/pasta04/1586794623/\r\n                    // 板: https://bbs.jpnkn.com/pasta04/\r\n                    // 設定: https://bbs.jpnkn.com/pasta04/SETTING.TXT\r\n                    encoding = 'SHIFT-JIS';\r\n                    // 板かスレか判定\r\n                    if (tempUrl.match(/test\\/read.cgi\\/.+\\/.+\\//)) {\r\n                        // スレ\r\n                        tempUrl = tempUrl.replace('test/read.cgi/', '').match(/(.+)\\/.+\\/$/)[1] + \"/\";\r\n                        boardUrl = tempUrl;\r\n                        tempUrl = tempUrl + \"SETTING.TXT\";\r\n                    }\r\n                    else {\r\n                        // 板\r\n                        boardUrl = tempUrl;\r\n                        tempUrl = tempUrl + \"SETTING.TXT\";\r\n                    }\r\n                }\r\n                _a.label = 1;\r\n            case 1:\r\n                _a.trys.push([1, 3, , 4]);\r\n                options = {\r\n                    url: tempUrl,\r\n                    method: 'GET',\r\n                    timeout: 3 * 1000,\r\n                    responseType: 'arraybuffer',\r\n                };\r\n                return [4 /*yield*/, axios_1.default(options)];\r\n            case 2:\r\n                response = _a.sent();\r\n                if (response.status < 400) {\r\n                    str = iconv_lite_1.default.decode(Buffer.from(response.data), encoding);\r\n                    str.split(/\\n/g).map(function (text) {\r\n                        var matched = text.match(/BBS_TITLE=(.+)/);\r\n                        if (matched) {\r\n                            result.boardName = matched[1];\r\n                            result.boardUrl = boardUrl;\r\n                            result.status = 'ok';\r\n                        }\r\n                    });\r\n                }\r\n                return [3 /*break*/, 4];\r\n            case 3:\r\n                e_2 = _a.sent();\r\n                log.error('なんかエラー');\r\n                return [3 /*break*/, 4];\r\n            case 4: return [2 /*return*/, result];\r\n        }\r\n    });\r\n}); };\r\nexports.threadUrlToBoardInfo = threadUrlToBoardInfo;\r\nexports.default = router;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * jpnkn fast\r\n */\r\nvar events_1 = require(\"events\");\r\nvar paho_mqtt_1 = __importDefault(require(\"paho-mqtt\"));\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('jpnkn');\r\nvar ReadIcons_1 = __importDefault(require(\"../ReadIcons\")); //アイコンファイル名取得\r\nvar ws_1 = __importDefault(require(\"ws\"));\r\nglobal.WebSocket = ws_1.default;\r\nvar JpnknFast = /** @class */ (function (_super) {\r\n    __extends(JpnknFast, _super);\r\n    function JpnknFast(boardId) {\r\n        var _this = _super.call(this) || this;\r\n        /** コメント取得のWebSocket */\r\n        // commentSocket: mqtt.Client = null as any;\r\n        _this.commentSocket = null;\r\n        /** WebSocketに対する定期ping */\r\n        _this.commentPingIntervalObj = null;\r\n        _this.fetchComment = function () { return __awaiter(_this, void 0, void 0, function () {\r\n            var client, onConnect, onConnectionLost, onMessageArrived;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                log.info(\"[fetchComment] boardId = \" + this.boardId);\r\n                client = new paho_mqtt_1.default.Client('a.mq.jpnkn.com', 9091, 'peca' + new Date().getTime());\r\n                onConnect = function (o) {\r\n                    client.subscribe(\"bbs/\" + _this.boardId);\r\n                    _this.emit('open');\r\n                };\r\n                onConnectionLost = function (e) {\r\n                    log.error('[fetchComment] なんかエラーだ');\r\n                    log.error(JSON.stringify(e, null, '  '));\r\n                    _this.emit('error', new Error(\"jpnkn\\u306EWebSocket\\u3067Error: [\" + e.errorCode + \"] \" + e.errorMessage));\r\n                    _this.fetchComment();\r\n                };\r\n                onMessageArrived = function (e) {\r\n                    var response = JSON.parse(e.payloadString);\r\n                    var res = response.body.split('<>');\r\n                    var item = {\r\n                        number: response.no,\r\n                        name: res[0],\r\n                        date: res[2],\r\n                        text: res[3],\r\n                        imgUrl: ReadIcons_1.default.getRandomIcons(),\r\n                        threadTitle: '',\r\n                        id: '',\r\n                        email: res[1],\r\n                        from: 'jpnkn',\r\n                    };\r\n                    _this.emit('comment', item);\r\n                };\r\n                client.connect({ userName: 'genkai', password: '7144', onSuccess: onConnect, useSSL: true });\r\n                client.onConnectionLost = onConnectionLost;\r\n                client.onMessageArrived = onMessageArrived;\r\n                // // 定期的にping打つ\r\n                // this.commentPingIntervalObj = setInterval(() => {\r\n                //   if (ws.OPEN) {\r\n                //     ws.ping();\r\n                //   } else {\r\n                //     clearInterval(this.commentPingIntervalObj);\r\n                //   }\r\n                // }, 30 * 1000);\r\n                this.commentSocket = client;\r\n                return [2 /*return*/];\r\n            });\r\n        }); };\r\n        /** コメント取得の停止 */\r\n        _this.stop = function () {\r\n            if (_this.commentPingIntervalObj) {\r\n                clearInterval(_this.commentPingIntervalObj);\r\n                _this.commentPingIntervalObj = null;\r\n            }\r\n            if (_this.commentSocket && _this.commentSocket.isConnected())\r\n                _this.commentSocket.disconnect();\r\n            // if (this.commentSocket && this.commentSocket.connected) this.commentSocket.end();\r\n            _this.emit('end');\r\n        };\r\n        if (!boardId)\r\n            throw TypeError('Required channelId.');\r\n        _this.boardId = boardId;\r\n        return _this;\r\n    }\r\n    JpnknFast.prototype.start = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (this.boardId) {\r\n                    this.emit('start');\r\n                    this.fetchComment();\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    JpnknFast.prototype.on = function (event, listener) {\r\n        return _super.prototype.on.call(this, event, listener);\r\n    };\r\n    return JpnknFast;\r\n}(events_1.EventEmitter));\r\nexports.default = JpnknFast;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Electronのモジュール\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar electron_1 = __importStar(require(\"electron\"));\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar util_1 = require(\"./util\");\r\nvar electron_window_state_1 = __importDefault(require(\"electron-window-state\"));\r\nconsole.trace = function () {\r\n    //\r\n};\r\nprocess.on('uncaughtException', function (err) {\r\n    electron_log_1.default.error(err);\r\n});\r\n// アプリケーションをコントロールするモジュール\r\nvar app = electron_1.default.app;\r\n// 多重起動防止\r\nif (!app.requestSingleInstanceLock()) {\r\n    electron_log_1.default.error('[app] It is terminated for multiple launches.');\r\n    app.quit();\r\n}\r\nelse {\r\n    electron_log_1.default.info('[app] started');\r\n    app.allowRendererProcessReuse = true;\r\n    var iconPath_1 = path_1.default.resolve(__dirname, '../icon.png');\r\n    // サーバー起動モジュール\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    var ss = require('./startServer');\r\n    console.trace(ss);\r\n    // メインウィンドウはGCされないようにグローバル宣言\r\n    globalThis.electron = {\r\n        mainWindow: null,\r\n        chatWindow: null,\r\n        translateWindow: null,\r\n        imagePreviewWindow: null,\r\n        seList: [],\r\n        twitchChat: null,\r\n        youtubeChat: null,\r\n        niconicoChat: null,\r\n        jpnknFast: null,\r\n        threadConnectionError: 0,\r\n        threadNumber: 0,\r\n        commentQueueList: [],\r\n        translateQueueList: [],\r\n    };\r\n    globalThis.config = {};\r\n    // 全てのウィンドウが閉じたら終了\r\n    // app.on('window-all-closed', () => {\r\n    //   if (process.platform != 'darwin') {\r\n    //     app.quit();\r\n    //   }\r\n    // });\r\n    // Electronの初期化完了後に実行\r\n    app.on('ready', function () {\r\n        var windowState = electron_window_state_1.default({\r\n            defaultWidth: 700,\r\n            defaultHeight: 720,\r\n            file: 'mainWindow.json',\r\n        });\r\n        // ウィンドウサイズを（フレームサイズを含まない）設定\r\n        var mainWin = new electron_1.default.BrowserWindow({\r\n            // 前回起動時のを復元\r\n            x: windowState.x,\r\n            y: windowState.y,\r\n            width: windowState.width,\r\n            height: windowState.height,\r\n            useContentSize: true,\r\n            icon: iconPath_1,\r\n            webPreferences: {\r\n                nodeIntegration: true,\r\n            },\r\n            skipTaskbar: true,\r\n        });\r\n        globalThis.electron.mainWindow = mainWin;\r\n        windowState.manage(mainWin);\r\n        mainWin.setTitle('unacast');\r\n        mainWin.setMenu(null);\r\n        // レンダラーで使用するhtmlファイルを指定する\r\n        mainWin.loadURL(path_1.default.resolve(__dirname, '../src/html/index.html'));\r\n        // ウィンドウが閉じられたらアプリも終了\r\n        mainWin.on('close', function (event) {\r\n            // 確認ダイアログではいをクリックしたら閉じる\r\n            event.preventDefault();\r\n            electron_1.dialog\r\n                .showMessageBox(mainWin, {\r\n                type: 'question',\r\n                buttons: ['Yes', 'No'],\r\n                // title: '',\r\n                message: '終了しますか？',\r\n            })\r\n                .then(function (value) {\r\n                if (value.response === 0) {\r\n                    app.exit();\r\n                }\r\n            });\r\n        });\r\n        mainWin.on('closed', function () {\r\n            electron_log_1.default.info('[app] close');\r\n            app.exit();\r\n        });\r\n        // 開発者ツールを開く\r\n        // mainWin.webContents.openDevTools();\r\n        // タスクトレイの設定\r\n        var tray = null;\r\n        app.whenReady().then(function () {\r\n            tray = new electron_1.Tray(iconPath_1);\r\n            var contextMenu = electron_1.Menu.buildFromTemplate([\r\n                {\r\n                    label: '設定',\r\n                    click: function () {\r\n                        globalThis.electron.mainWindow.focus();\r\n                    },\r\n                },\r\n                {\r\n                    label: 'コメント',\r\n                    click: function () {\r\n                        globalThis.electron.chatWindow.focus();\r\n                    },\r\n                },\r\n                {\r\n                    label: '翻訳',\r\n                    click: function () {\r\n                        globalThis.electron.translateWindow.focus();\r\n                    },\r\n                },\r\n                {\r\n                    label: '終了',\r\n                    click: function () {\r\n                        globalThis.electron.mainWindow.close();\r\n                    },\r\n                },\r\n            ]);\r\n            tray.setToolTip('∈(ﾟ◎ﾟ)∋ｳﾅｰ');\r\n            tray.setContextMenu(contextMenu);\r\n            // タスクトレイクリック時の挙動\r\n            var isDoubleClicked = false;\r\n            tray.on('click', function (event) { return __awaiter(void 0, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            isDoubleClicked = false;\r\n                            return [4 /*yield*/, util_1.sleep(200)];\r\n                        case 1:\r\n                            _a.sent();\r\n                            if (isDoubleClicked)\r\n                                return [2 /*return*/];\r\n                            globalThis.electron.chatWindow.focus();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            }); });\r\n            tray.on('double-click', function (event) {\r\n                isDoubleClicked = true;\r\n                globalThis.electron.mainWindow.focus();\r\n            });\r\n        });\r\n        createChatWindow();\r\n        createTranslateWindow();\r\n        createImagePreviewWindow();\r\n    });\r\n    // 音声再生できるようにする\r\n    app.commandLine.appendSwitch('--autoplay-policy', 'no-user-gesture-required');\r\n}\r\nvar createChatWindow = function () {\r\n    var windowState = electron_window_state_1.default({\r\n        defaultWidth: 400,\r\n        defaultHeight: 720,\r\n        file: 'chatWindow.json',\r\n    });\r\n    var iconPath = path_1.default.resolve(__dirname, '../icon.png');\r\n    var chatWindow = new electron_1.default.BrowserWindow({\r\n        x: windowState.x,\r\n        y: windowState.y,\r\n        width: windowState.width,\r\n        height: windowState.height,\r\n        useContentSize: true,\r\n        icon: iconPath,\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n        },\r\n        // タスクバーに表示しない\r\n        skipTaskbar: true,\r\n        // 閉じれなくする\r\n        closable: false,\r\n    });\r\n    windowState.manage(chatWindow);\r\n    chatWindow.setTitle('unacast');\r\n    chatWindow.setMenu(null);\r\n    // レンダラーで使用するhtmlファイルを指定する\r\n    chatWindow.loadURL(path_1.default.resolve(__dirname, '../src/html/chat.html'));\r\n    globalThis.electron.chatWindow = chatWindow;\r\n    // chatWindow.webContents.openDevTools();\r\n};\r\nvar createTranslateWindow = function () {\r\n    var windowState = electron_window_state_1.default({\r\n        defaultWidth: 400,\r\n        defaultHeight: 720,\r\n        file: 'translateWindow.json',\r\n    });\r\n    var iconPath = path_1.default.resolve(__dirname, '../icon.png');\r\n    var translateWindow = new electron_1.default.BrowserWindow({\r\n        x: windowState.x,\r\n        y: windowState.y,\r\n        width: windowState.width,\r\n        height: windowState.height,\r\n        useContentSize: true,\r\n        icon: iconPath,\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n        },\r\n        // タスクバーに表示しない\r\n        skipTaskbar: true,\r\n        // 閉じれなくする\r\n        closable: false,\r\n    });\r\n    windowState.manage(translateWindow);\r\n    translateWindow.setTitle('unacast');\r\n    translateWindow.setMenu(null);\r\n    // レンダラーで使用するhtmlファイルを指定する\r\n    translateWindow.loadURL(path_1.default.resolve(__dirname, '../src/html/translate.html'));\r\n    // 初期表示は最小化\r\n    translateWindow.minimize();\r\n    globalThis.electron.translateWindow = translateWindow;\r\n    // translateWindow.webContents.openDevTools();\r\n};\r\nvar createImagePreviewWindow = function () {\r\n    var windowState = electron_window_state_1.default({\r\n        defaultWidth: 400,\r\n        defaultHeight: 400,\r\n        file: 'imagePreview.json',\r\n    });\r\n    var iconPath = path_1.default.resolve(__dirname, '../icon.png');\r\n    var childwindow = new electron_1.default.BrowserWindow({\r\n        x: windowState.x,\r\n        y: windowState.y,\r\n        width: windowState.width,\r\n        height: windowState.height,\r\n        useContentSize: true,\r\n        icon: iconPath,\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n        },\r\n        // タスクバーに表示しない\r\n        skipTaskbar: true,\r\n        minimizable: false,\r\n        minHeight: 100,\r\n        closable: true,\r\n    });\r\n    windowState.manage(childwindow);\r\n    childwindow.setTitle('unacast');\r\n    childwindow.setMenu(null);\r\n    childwindow.hide();\r\n    // レンダラーで使用するhtmlファイルを指定する\r\n    childwindow.loadURL(path_1.default.resolve(__dirname, '../src/html/imagePreview.html'));\r\n    // ×押したらインスタンス再生成\r\n    childwindow.on('close', function (e) {\r\n        setTimeout(function () {\r\n            createImagePreviewWindow();\r\n        }, 10);\r\n    });\r\n    globalThis.electron.imagePreviewWindow = childwindow;\r\n    // childwindow.webContents.openDevTools();\r\n};\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * ニコ生コメント\r\n */\r\nvar events_1 = require(\"events\");\r\nvar axios_1 = __importDefault(require(\"axios\"));\r\nvar cheerio_1 = __importDefault(require(\"cheerio\"));\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('niconama');\r\nvar util_1 = require(\"../util\");\r\nvar ws_1 = __importDefault(require(\"ws\"));\r\nvar NiconamaComment = /** @class */ (function (_super) {\r\n    __extends(NiconamaComment, _super);\r\n    function NiconamaComment(options) {\r\n        var _this = _super.call(this) || this;\r\n        /** 配信開始待ちのインターバル(ms) */\r\n        _this.waitBroadcastPollingInterval = 5000;\r\n        /** 初期処理のコメントを受信し終わった */\r\n        _this.isFirstCommentReceived = false;\r\n        /** 最新のコメント番号 */\r\n        _this.latestNo = NaN;\r\n        /** コメント取得のWebSocket */\r\n        _this.commentSocket = null;\r\n        /** ニコ生チャットWebSocketに対する定期ping */\r\n        _this.commentPingIntervalObj = null;\r\n        /** ニコ生の配信開始待ち */\r\n        _this.pollingStartBroadcast = function () { return __awaiter(_this, void 0, void 0, function () {\r\n            var url, res, $, embeddedData, e_1;\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        url = \"https://live.nicovideo.jp/watch/\" + this.communityId;\r\n                        log.info(\"[pollingStartBroadcast] \" + url);\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 6, , 8]);\r\n                        return [4 /*yield*/, axios_1.default.get(url)];\r\n                    case 2:\r\n                        res = _b.sent();\r\n                        $ = cheerio_1.default.load(res.data);\r\n                        embeddedData = JSON.parse((_a = $('#embedded-data').attr('data-props')) !== null && _a !== void 0 ? _a : '');\r\n                        if (!(embeddedData.program.status === 'ENDED' || embeddedData.program.endTime * 1000 < new Date().getTime())) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, util_1.sleep(this.waitBroadcastPollingInterval)];\r\n                    case 3:\r\n                        _b.sent();\r\n                        this.pollingStartBroadcast();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // 始まってる\r\n                        this.emit('start');\r\n                        this.fetchCommentServerThread();\r\n                        _b.label = 5;\r\n                    case 5: return [3 /*break*/, 8];\r\n                    case 6:\r\n                        e_1 = _b.sent();\r\n                        this.emit('error', new Error(\"connection error to \" + url));\r\n                        log.error(JSON.stringify(e_1, null, '  '));\r\n                        return [4 /*yield*/, util_1.sleep(this.waitBroadcastPollingInterval * 2)];\r\n                    case 7:\r\n                        _b.sent();\r\n                        this.pollingStartBroadcast();\r\n                        return [3 /*break*/, 8];\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); };\r\n        /** ニコ生のコメントを取得 */\r\n        _this.fetchCommentServerThread = function () { return __awaiter(_this, void 0, void 0, function () {\r\n            var url, res, $, embeddedData, broadcastId, audienceToken, frontendId, threadWssUrl, tWs;\r\n            var _this = this;\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        log.info(\"[fetchCommentServerThread]\");\r\n                        url = \"https://live.nicovideo.jp/watch/\" + this.communityId;\r\n                        return [4 /*yield*/, axios_1.default.get(url)];\r\n                    case 1:\r\n                        res = _b.sent();\r\n                        $ = cheerio_1.default.load(res.data);\r\n                        embeddedData = JSON.parse((_a = $('#embedded-data').attr('data-props')) !== null && _a !== void 0 ? _a : '');\r\n                        broadcastId = embeddedData.program.broadcastId || embeddedData.program.reliveProgramId;\r\n                        audienceToken = embeddedData.player.audienceToken;\r\n                        frontendId = embeddedData.site.frontendId;\r\n                        threadWssUrl = \"wss://a.live2.nicovideo.jp/unama/wsapi/v2/watch/\" + broadcastId + \"?audience_token=\" + audienceToken + \"&frontend_id=\" + frontendId;\r\n                        log.info(threadWssUrl);\r\n                        tWs = new ws_1.default(threadWssUrl, {\r\n                            headers: {\r\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36',\r\n                            },\r\n                        });\r\n                        tWs.onmessage = function (event) {\r\n                            var obj = JSON.parse(event.data.toString());\r\n                            // log.info(JSON.stringify(obj, null, '  '));\r\n                            log.info(\"[fetchCommentServerThread] WS received - type: \" + obj.type);\r\n                            switch (obj.type) {\r\n                                case 'serverTime': {\r\n                                    // currentMs\r\n                                    break;\r\n                                }\r\n                                case 'seat': {\r\n                                    // keepIntervalSec\r\n                                    break;\r\n                                }\r\n                                case 'stream': {\r\n                                    // hlsのURLとか\r\n                                    break;\r\n                                }\r\n                                case 'room': {\r\n                                    var data = obj.data;\r\n                                    _this.fetchComment(data.messageServer.uri, data.threadId);\r\n                                    break;\r\n                                }\r\n                                case 'statistics': {\r\n                                    // 視聴者数とか\r\n                                    break;\r\n                                }\r\n                                case 'schedule': {\r\n                                    // 開始、終了時刻\r\n                                    break;\r\n                                }\r\n                                case 'akashic': {\r\n                                    var data = obj.data;\r\n                                    break;\r\n                                }\r\n                                case 'ping': {\r\n                                    tWs.send(JSON.stringify({ type: 'pong' }));\r\n                                    break;\r\n                                }\r\n                                // 切断。枠が終了した時もここ。\r\n                                case 'disconnect': {\r\n                                    var data = obj.data;\r\n                                    _this.stop();\r\n                                    _this.start();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        };\r\n                        tWs.on('open', function () {\r\n                            log.info('startWatching');\r\n                            tWs.send(JSON.stringify({\r\n                                type: 'startWatching',\r\n                                data: { stream: { quality: 'high', protocol: 'hls', latency: 'low', chasePlay: false }, room: { protocol: 'webSocket', commentable: true }, reconnect: false },\r\n                            }));\r\n                            log.info('getAkashic');\r\n                            tWs.send(JSON.stringify({ type: 'getAkashic', data: { chasePlay: false } }));\r\n                        });\r\n                        tWs.on('error', function (event) {\r\n                            log.error('[fetchCommentServerThread] スレッドID取得のWebSocketでエラー。再接続を実施。');\r\n                            log.error(JSON.stringify(event, null, '  '));\r\n                            _this.emit('error', new Error(\"\\u30B9\\u30EC\\u30C3\\u30C9ID\\u53D6\\u5F97\\u306EWebSocket\\u3067Error\"));\r\n                            if (tWs.OPEN)\r\n                                tWs.close();\r\n                            _this.fetchCommentServerThread();\r\n                        });\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); };\r\n        /**\r\n         *\r\n         * @param wsUrl コメントサーバのWebSocket URL\r\n         * @param threadId threadID\r\n         */\r\n        _this.fetchComment = function (wsUrl, threadId) { return __awaiter(_this, void 0, void 0, function () {\r\n            var ws;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                log.info(\"[fetchComment] threadId = \" + threadId);\r\n                ws = new ws_1.default(wsUrl, 'niconama', {\r\n                    headers: {\r\n                        'Sec-WebSocket-Extensions': 'permessage-deflate; client_max_window_bits',\r\n                        'Sec-WebSocket-Protocol': 'msg.nicovideo.jp#json',\r\n                    },\r\n                });\r\n                ws.on('message', function (event) {\r\n                    var _a, _b, _c;\r\n                    var obj = JSON.parse(event.toString());\r\n                    // 初回取得時は ping, ping, thread, chat, chat..., ping, pingの順で受け取る\r\n                    // log.info(`[fetchComment] WS received  - ${JSON.stringify(obj)}`);\r\n                    // コメント番号更新\r\n                    if ((_a = obj === null || obj === void 0 ? void 0 : obj.chat) === null || _a === void 0 ? void 0 : _a.no) {\r\n                        _this.latestNo = obj.chat.no;\r\n                    }\r\n                    if (((_b = obj === null || obj === void 0 ? void 0 : obj.ping) === null || _b === void 0 ? void 0 : _b.content) === 'rf:0') {\r\n                        _this.isFirstCommentReceived = true;\r\n                        _this.emit('open', { liveId: '', number: _this.latestNo });\r\n                    }\r\n                    if (!_this.isFirstCommentReceived)\r\n                        return;\r\n                    var chat = obj;\r\n                    var comment = (_c = chat.chat) === null || _c === void 0 ? void 0 : _c.content;\r\n                    if (!comment)\r\n                        return;\r\n                    log.info(\"[fetchComment]WS - content: \" + comment);\r\n                    // /で始まるのはなんかコマンドなので除外する\r\n                    if (comment.match(/^\\/[a-z]+ /))\r\n                        return;\r\n                    var item = {\r\n                        number: chat.chat.no.toString(),\r\n                        name: '',\r\n                        comment: comment,\r\n                    };\r\n                    _this.emit('comment', item);\r\n                });\r\n                ws.on('error', function (event) {\r\n                    log.error('[fetchComment]なんかエラーだ');\r\n                    log.error(JSON.stringify(event, null, '  '));\r\n                    _this.emit('error', new Error(\"\\u30CB\\u30B3\\u751F\\u30C1\\u30E3\\u30C3\\u30C8\\u306EWebSocket\\u3067Error\"));\r\n                    if (ws.OPEN)\r\n                        ws.close();\r\n                    _this.fetchComment(wsUrl, threadId);\r\n                });\r\n                ws.on('open', function () {\r\n                    log.info('[fetchComment] connected');\r\n                    ws.send(JSON.stringify([\r\n                        { ping: { content: 'rs:0' } },\r\n                        { ping: { content: 'ps:0' } },\r\n                        // eslint-disable-next-line @typescript-eslint/camelcase\r\n                        { thread: { thread: threadId, version: '20061206', user_id: 'guest', res_from: -150, with_global: 1, scores: 1, nicoru: 0 } },\r\n                        { ping: { content: 'pf:0' } },\r\n                        { ping: { content: 'rf:0' } },\r\n                    ]));\r\n                });\r\n                // 定期的にping打つ\r\n                this.commentPingIntervalObj = setInterval(function () {\r\n                    if (ws.OPEN) {\r\n                        ws.ping();\r\n                    }\r\n                    else {\r\n                        clearInterval(_this.commentPingIntervalObj);\r\n                    }\r\n                }, 30 * 1000);\r\n                this.commentSocket = ws;\r\n                return [2 /*return*/];\r\n            });\r\n        }); };\r\n        /** コメント取得の停止 */\r\n        _this.stop = function () {\r\n            _this.isFirstCommentReceived = false;\r\n            _this.latestNo = NaN;\r\n            if (_this.commentPingIntervalObj) {\r\n                clearInterval(_this.commentPingIntervalObj);\r\n                _this.commentPingIntervalObj = null;\r\n            }\r\n            if (_this.commentSocket)\r\n                _this.commentSocket.close();\r\n            _this.emit('end');\r\n        };\r\n        if ('communityId' in options) {\r\n            _this.communityId = options.communityId;\r\n        }\r\n        else {\r\n            throw TypeError('Required channelId.');\r\n        }\r\n        return _this;\r\n    }\r\n    NiconamaComment.prototype.start = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (this.communityId) {\r\n                    this.emit('wait');\r\n                    this.pollingStartBroadcast();\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    NiconamaComment.prototype.on = function (event, listener) {\r\n        return _super.prototype.on.call(this, event, listener);\r\n    };\r\n    return NiconamaComment;\r\n}(events_1.EventEmitter));\r\nexports.default = NiconamaComment;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.postRes = exports.readBoard = void 0;\r\n/**\r\n * 5ch互換BBS読み込み用モジュール\r\n */\r\nvar axios_1 = __importDefault(require(\"axios\"));\r\nvar iconv_lite_1 = __importDefault(require(\"iconv-lite\")); // 文字コード変換用パッケージ\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('bbs');\r\nvar https_1 = __importDefault(require(\"https\"));\r\nvar encoding_japanese_1 = __importDefault(require(\"encoding-japanese\"));\r\nvar instance = axios_1.default.create({\r\n    httpsAgent: new https_1.default.Agent({\r\n        rejectUnauthorized: false,\r\n    }),\r\n});\r\n/** ステータスコード304 _NotModified */\r\nvar NOT_MODIFIED = '304';\r\nvar RANGE_NOT_SATISFIABLE = '416';\r\n/** スレ一覧を読み込む */\r\nvar readBoard = function (boardUrl) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var requestUrl, list, options, response, str, error_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                requestUrl = boardUrl + \"subject.txt\";\r\n                list = [];\r\n                options = {\r\n                    url: requestUrl,\r\n                    method: 'GET',\r\n                    timeout: 3 * 1000,\r\n                    responseType: 'arraybuffer',\r\n                };\r\n                _a.label = 1;\r\n            case 1:\r\n                _a.trys.push([1, 3, , 4]);\r\n                return [4 /*yield*/, instance(options)];\r\n            case 2:\r\n                response = _a.sent();\r\n                str = iconv_lite_1.default.decode(Buffer.from(response.data), 'Shift_JIS');\r\n                // パースして格納\r\n                list.push.apply(list, str\r\n                    .split('\\n')\r\n                    .filter(function (item) { return item; })\r\n                    .map(function (line) { return parseThreadList(boardUrl, line); }));\r\n                return [3 /*break*/, 4];\r\n            case 3:\r\n                error_1 = _a.sent();\r\n                if (error_1.status == NOT_MODIFIED) {\r\n                    log.error('5ch系BBS板取得APIリクエストエラー、NOT_MODIFIED');\r\n                }\r\n                else if (error_1.status == RANGE_NOT_SATISFIABLE) {\r\n                    log.error('5ch系BBS板取得APIリクエストエラー、RANGE_NOT_SATISFIABLE');\r\n                }\r\n                else {\r\n                    log.error('5ch系BBS板取得APIリクエストエラー、message=' + error_1.message);\r\n                }\r\n                throw new Error('connection error');\r\n            case 4: return [2 /*return*/, list];\r\n        }\r\n    });\r\n}); };\r\nexports.readBoard = readBoard;\r\n/**\r\n * レスを投稿する\r\n * @param hostname ホスト名。https://hogehoge/\r\n * @param threadNumber スレ番号 12345678\r\n * @param boardId 板ID pasta04\r\n * @param message 投稿文\r\n */\r\nvar postRes = function (hostname, threadNumber, boardId, message) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var unicodeArray, i, sjisArray, encodedKeyword, result;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                unicodeArray = [];\r\n                for (i = 0; i < message.length; i++) {\r\n                    unicodeArray.push(message.charCodeAt(i));\r\n                }\r\n                sjisArray = encoding_japanese_1.default.convert(unicodeArray, {\r\n                    to: 'SJIS',\r\n                    from: 'UNICODE',\r\n                });\r\n                encodedKeyword = encoding_japanese_1.default.urlEncode(sjisArray);\r\n                // log.info(encodeURIComponent.toString());\r\n                log.info(hostname + \"test/bbs.cgi\");\r\n                log.info(\"FROM=&MESSAGE=\" + encodedKeyword + \"&mail=sage&key=\" + threadNumber + \"&bbs=\" + boardId);\r\n                return [4 /*yield*/, axios_1.default.post(hostname + \"test/bbs.cgi\", \"FROM=&MESSAGE=\" + encodedKeyword + \"&mail=sage&key=\" + threadNumber + \"&bbs=\" + boardId, {\r\n                        headers: {\r\n                            Accept: '*/*',\r\n                            'Content-Type': 'application/x-www-form-urlencoded',\r\n                            'Accept-Encoding': 'gzip, deflate, br',\r\n                            Cookie: 'MAIL=\"sage\"; NAME=\"\"',\r\n                        },\r\n                        withCredentials: true,\r\n                    })];\r\n            case 1:\r\n                result = _a.sent();\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexports.postRes = postRes;\r\nvar Read5ch = /** @class */ (function () {\r\n    function Read5ch() {\r\n        var _this = this;\r\n        /**\r\n         * レス読み込み\r\n         * 引数で指定した板からレスを読む\r\n         * レス番号を指定していない場合は全件取得\r\n         * @param threadUrl スレURL\r\n         * @param resNum レス番号\r\n         */\r\n        this.read = function (threadUrl, resNum) { return __awaiter(_this, void 0, void 0, function () {\r\n            var rep, requestUrl, range, options, responseJson, response, headers, str, result, dateStr, date, error_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        // log.info(`[Read5ch] threadUrl=${threadUrl} resNum=${resNum}`);\r\n                        // 板や最終レス番号がかわったら最初からとり直す(lastmodifiと rangeのリセット)\r\n                        if (threadUrl != this.lastThreadUrl || Number.isNaN(resNum) || resNum < this.lastResNumber) {\r\n                            this.lastThreadUrl = threadUrl;\r\n                            this.lastModified = null;\r\n                            this.lastByte = 0;\r\n                            this.lastWroteDate = null;\r\n                            log.info(' reset');\r\n                        }\r\n                        else {\r\n                            log.debug('noreset');\r\n                        }\r\n                        rep = /\\/test\\/read.cgi(\\/.+)(\\/.+)\\//;\r\n                        requestUrl = threadUrl.replace(rep, '$1/dat$2.dat');\r\n                        range = this.lastByte;\r\n                        options = {\r\n                            url: requestUrl,\r\n                            method: 'GET',\r\n                            timeout: 3 * 1000,\r\n                            responseType: 'arraybuffer',\r\n                            headers: {\r\n                                'if-modified-since': this.lastModified,\r\n                                range: 'bytes=' + range + '-',\r\n                            },\r\n                            validateStatus: function (status) {\r\n                                return status >= 200 && status <= 304;\r\n                            },\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, instance(options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (response.status === 304) {\r\n                            log.info('status 304');\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        headers = response.headers;\r\n                        str = iconv_lite_1.default.decode(Buffer.from(response.data), 'Shift_JIS');\r\n                        // レスポンスオブジェクト作成、content-rangeがある場合とない場合で処理を分ける\r\n                        if (headers['content-range'] == null || this.lastByte == 0) {\r\n                            log.debug('content-range=' + headers['content-range']);\r\n                            result = parseNewResponse(str, resNum);\r\n                            responseJson = result.result;\r\n                        }\r\n                        else {\r\n                            responseJson = parseDiffResponse(str, resNum);\r\n                        }\r\n                        // 最終書き込み時刻の整合性チェック\r\n                        // ぜろちゃんねる固有の問題？たまにデータが巻き戻る\r\n                        if (responseJson.length > 0) {\r\n                            dateStr = responseJson[responseJson.length - 1].date;\r\n                            if (dateStr) {\r\n                                date = new Date(dateStr);\r\n                                if (this.lastWroteDate) {\r\n                                    // スレが変わったわけでもないのに最終書き込み時刻よりも古いデータが取得できた場合は無かったことにする\r\n                                    if (this.lastWroteDate > date) {\r\n                                        log.warn(\"\\u6642\\u523B\\u4E0D\\u6574\\u5408: unacast: \" + this.lastWroteDate + \" bbs: \" + date);\r\n                                        responseJson = [];\r\n                                    }\r\n                                    else {\r\n                                        this.lastWroteDate = date;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    this.lastWroteDate = date;\r\n                                }\r\n                            }\r\n                        }\r\n                        // LastModifiedとRange更新処理\r\n                        if (responseJson.length > 0 && headers['last-modified'] != null) {\r\n                            this.lastModified = headers['last-modified'];\r\n                        }\r\n                        // 最終レス番更新\r\n                        if (responseJson.length > 0) {\r\n                            this.lastResNumber = Number(responseJson[responseJson.length - 1].number);\r\n                        }\r\n                        // 取得バイト数表示\r\n                        if (headers['content-length'] != null && responseJson.length > 0) {\r\n                            this.lastByte = this.lastByte + parseInt(headers['content-length']) - 1;\r\n                            log.debug('lastByte=' + this.lastByte);\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        error_2 = _a.sent();\r\n                        responseJson = [];\r\n                        if (error_2.status == NOT_MODIFIED) {\r\n                            log.error('5ch系BBSレス取得APIリクエストエラー、NOT_MODIFIED');\r\n                        }\r\n                        else if (error_2.status == RANGE_NOT_SATISFIABLE) {\r\n                            log.error('5ch系BBSレス取得APIリクエストエラー、RANGE_NOT_SATISFIABLE');\r\n                        }\r\n                        else {\r\n                            log.error('5ch系BBSレス取得APIリクエストエラー、message=' + error_2.message);\r\n                        }\r\n                        throw new Error('connection error');\r\n                    case 4: return [2 /*return*/, responseJson];\r\n                }\r\n            });\r\n        }); };\r\n        this.lastThreadUrl = '';\r\n        this.lastResNumber = 0;\r\n        this.lastModified = null;\r\n        this.lastByte = 0;\r\n        this.lastWroteDate = null;\r\n    }\r\n    return Read5ch;\r\n}());\r\n/**\r\n * 全取得したレスポンス（複数）のパース\r\n * 戻りとしてパースしたjsonオブジェクトの配列を返す\r\n * @param res 板から返却されたdat\r\n * @param resNum リクエストされたレス番号\r\n */\r\nvar parseNewResponse = function (res, resNum) {\r\n    log.info(\"parseNewResponse: res=\" + res.length + \" resNum=\" + resNum);\r\n    // 結果を格納する配列\r\n    var result = [];\r\n    // レス番号\r\n    var num = 0;\r\n    // 新着レスを改行ごとにSplitする\r\n    var resArray = res.split(/\\r\\n|\\r|\\n/);\r\n    // 新着なしなら戻る。\r\n    if (resArray.length === 0) {\r\n        return { result: result, lastResNumber: resNum };\r\n    }\r\n    // 配列の最後に空の要素が入ることがあるので取り除く\r\n    if (resArray[resArray.length - 1].length === 0) {\r\n        resArray.pop();\r\n    }\r\n    // レス指定なしの場合全件取得\r\n    if (Number.isNaN(resNum) || resNum < 1) {\r\n        log.info(\"resNum: \" + resNum + \" \");\r\n        num = 0;\r\n    }\r\n    else {\r\n        num = resNum;\r\n    }\r\n    // log.info(`num = ${num}  resArrayLength = ${resArray.length}   ${resArray[num]}`);\r\n    // 1行ごとにパースする\r\n    for (; num < resArray.length; num++) {\r\n        // パースメソッド呼び出し\r\n        if (resArray[num].length > 0) {\r\n            result.push(parseResponse(resArray[num], num + 1));\r\n        }\r\n    }\r\n    // パースしたオブジェクトの配列を返却\r\n    return { result: result, lastResNumber: num + 1 };\r\n};\r\n/**\r\n * 差分取得したレスポンス（複数）のパース\r\n * 戻りとしてパースしたjsonオブジェクトの配列を返す\r\n * @param res 板から返却されたdat1行分\r\n * @param resNum リクエストされたレス番号\r\n */\r\nvar parseDiffResponse = function (res, resNum) {\r\n    log.info(\"parseDiffResponse: res=\" + res.length + \" resNum=\" + resNum);\r\n    //結果を格納する配列\r\n    var result = [];\r\n    // レス番号\r\n    var num = resNum + 1;\r\n    //新着レスを改行ごとにSplitする\r\n    var resArray = res.split(/\\r\\n|\\r|\\n/);\r\n    // 新着なしなら戻る。\r\n    if (resArray.length === 0) {\r\n        return result;\r\n    }\r\n    else {\r\n        // 配列の最後に空の要素が入ることがあるので取り除く\r\n        if (resArray[resArray.length - 1].length == 0) {\r\n            resArray.pop();\r\n        }\r\n    }\r\n    log.debug('purseDiffResponse 取得レス番号=' + num);\r\n    //1行ごとにパースする\r\n    resArray.forEach(function (value) {\r\n        //パースメソッド呼び出し\r\n        if (value.length > 0) {\r\n            result.push(parseResponse(value, num));\r\n            num++;\r\n        }\r\n    });\r\n    // パースしたオブジェクトの配列を返却\r\n    return result;\r\n};\r\n/**\r\n * スレ一覧のパース\r\n * @param String // res レスポンス1レス\r\n * @param Integer // num レス番（0スタート）\r\n */\r\nvar parseThreadList = function (boardUrl, subjectLine) {\r\n    var _a, _b, _c, _d, _e;\r\n    //APIの返却値を<>で分割\r\n    //レスの要素\r\n    //0:dat名\r\n    //1:スレタイ（レス数）\r\n    var splitRes = subjectLine.split('<>');\r\n    // log.debug(splitRes);\r\n    var datNum = splitRes[0].replace('.dat', '');\r\n    var hostname = (_b = (_a = boardUrl.match(/^https?:\\/\\/.+?\\//)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\r\n    var boardName = boardUrl.replace(hostname, '');\r\n    var url = hostname + \"test/read.cgi/\" + boardName + datNum + \"/\";\r\n    var titleTemp = splitRes[1];\r\n    var name = (_d = (_c = titleTemp.match(/(.*?) \\(\\d+\\)$/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '★取得失敗★';\r\n    var resNum = Number((_e = titleTemp.match(/\\(\\d+\\)$/)) === null || _e === void 0 ? void 0 : _e[0].replace(/\\(|\\)/g, ''));\r\n    // オブジェクトを返却\r\n    return {\r\n        url: url,\r\n        name: name,\r\n        resNum: resNum,\r\n    };\r\n};\r\n/**\r\n * レスのパース\r\n * @param res レスポンス1レス\r\n * @param num レス番\r\n */\r\nvar parseResponse = function (res, num) {\r\n    //APIの返却値を<>で分割\r\n    //レスの要素\r\n    //0:名前\r\n    //1:メアド\r\n    //2:日付とID （2019/11/03(日) 08:55:00 ID:kanikani）みたいに表示\r\n    //3:本文\r\n    //4:スレタイ （1レス目のみ）\r\n    var splitRes = res.split('<>');\r\n    // 日付とID分離処理、' ID:'で区切る\r\n    var dateId = splitRes[2].split(' ID:');\r\n    var date = dateId[0];\r\n    var id = dateId.length === 2 ? dateId[1] : '';\r\n    var resJson = {\r\n        number: num.toString(),\r\n        name: splitRes[0],\r\n        email: splitRes[1],\r\n        date: date,\r\n        text: splitRes[3],\r\n        threadTitle: splitRes[4] ? splitRes[4] : '',\r\n        id: id,\r\n        imgUrl: '',\r\n        from: 'bbs',\r\n    };\r\n    // オブジェクトを返却\r\n    return resJson;\r\n};\r\nexports.default = Read5ch;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.postRes = exports.readBoard = void 0;\r\n/**\r\n * したらば読み込み用モジュール\r\n */\r\nvar axios_1 = __importDefault(require(\"axios\"));\r\nvar https_1 = __importDefault(require(\"https\"));\r\nvar iconv_lite_1 = __importDefault(require(\"iconv-lite\")); // 文字コード変換用パッケージ\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('bbs');\r\nvar encoding_japanese_1 = __importDefault(require(\"encoding-japanese\"));\r\n/** スレ一覧を読み込む */\r\nvar readBoard = function (boardUrl) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var requestUrl, list, options, response, str, error_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                requestUrl = boardUrl + \"subject.txt\";\r\n                list = [];\r\n                options = {\r\n                    url: requestUrl,\r\n                    method: 'GET',\r\n                    timeout: 3 * 1000,\r\n                    responseType: 'arraybuffer',\r\n                };\r\n                _a.label = 1;\r\n            case 1:\r\n                _a.trys.push([1, 3, , 4]);\r\n                return [4 /*yield*/, axios_1.default(options)];\r\n            case 2:\r\n                response = _a.sent();\r\n                str = iconv_lite_1.default.decode(Buffer.from(response.data), 'EUC-JP');\r\n                // パースして格納\r\n                list.push.apply(list, str\r\n                    .split('\\n')\r\n                    .filter(function (item) { return item; })\r\n                    .map(function (line) { return parseThreadList(boardUrl, line); }));\r\n                return [3 /*break*/, 4];\r\n            case 3:\r\n                error_1 = _a.sent();\r\n                log.error('[Read5ch.js]5ch系BBS板取得APIリクエストエラー、message=' + error_1.message);\r\n                throw new Error('connection error');\r\n            case 4: return [2 /*return*/, list];\r\n        }\r\n    });\r\n}); };\r\nexports.readBoard = readBoard;\r\n/**\r\n * レスを投稿する\r\n * @param hostname ホスト名。https://hogehoge/\r\n * @param threadNumber スレ番号 12345678\r\n * @param boardId 板ID pasta04\r\n * @param message 投稿文\r\n */\r\nvar postRes = function (hostname, threadNumber, boardId, message) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var unicodeArray, i, sjisArray, encodedKeyword, dir, bbs, result;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                unicodeArray = [];\r\n                for (i = 0; i < message.length; i++) {\r\n                    unicodeArray.push(message.charCodeAt(i));\r\n                }\r\n                sjisArray = encoding_japanese_1.default.convert(unicodeArray, {\r\n                    to: 'EUCJP',\r\n                    from: 'UNICODE',\r\n                });\r\n                encodedKeyword = encoding_japanese_1.default.urlEncode(sjisArray);\r\n                dir = boardId.split('/')[0];\r\n                bbs = boardId.split('/')[1];\r\n                return [4 /*yield*/, axios_1.default.post(hostname + \"bbs/write.cgi/\" + boardId + \"/\" + threadNumber + \"/\", \"dir=\" + dir + \"&bbs=\" + bbs + \"&key=\" + threadNumber + \"&time=\" + new Date().getTime() + \"&name=&MAIL=sage&MESSAGE=\" + encodedKeyword, {\r\n                        headers: {\r\n                            Accept: '*/*',\r\n                            'Content-Type': 'application/x-www-form-urlencoded',\r\n                            'Accept-Encoding': 'gzip, deflate, br',\r\n                            Referer: \"\" + hostname + boardId + \"/\",\r\n                            Cookie: 'MAIL=\"sage\"; NAME=\"\"',\r\n                        },\r\n                        withCredentials: true,\r\n                    })];\r\n            case 1:\r\n                result = _a.sent();\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexports.postRes = postRes;\r\nvar ReadSitaraba = /** @class */ (function () {\r\n    function ReadSitaraba() {\r\n        var _this = this;\r\n        /**\r\n         * レス読み込み\r\n         * @description 引数で指定した板からレスを読む。\r\n         * @description レス番号を指定していない場合は全件取得\r\n         * @param threadUrl スレURL\r\n         * @param resNum レス番号\r\n         */\r\n        this.read = function (threadUrl, resNum) { return __awaiter(_this, void 0, void 0, function () {\r\n            var requestUrl, options, response, str, responseJson, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestUrl = threadUrl.replace('read.cgi', 'rawmode.cgi');\r\n                        if (resNum > 0) {\r\n                            // レス番号がある場合レス番号以降を取得\r\n                            requestUrl += resNum + '-';\r\n                        }\r\n                        else {\r\n                            // レス番号がない場合全県取得\r\n                            requestUrl += '';\r\n                        }\r\n                        options = {\r\n                            url: requestUrl,\r\n                            method: 'GET',\r\n                            responseType: 'arraybuffer',\r\n                            timeout: 3 * 1000,\r\n                            httpsAgent: new https_1.default.Agent({\r\n                                rejectUnauthorized: false,\r\n                            }),\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, axios_1.default(options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        str = decodeUnicodeStr(iconv_lite_1.default.decode(Buffer.from(response.data), 'EUC-JP'));\r\n                        responseJson = parseNewResponse(str);\r\n                        return [2 /*return*/, responseJson];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        // 通信エラー\r\n                        throw new Error(\"\\u901A\\u4FE1\\u30A8\\u30E9\\u30FC: \" + requestUrl + \" stack=\" + e_1);\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); };\r\n    }\r\n    return ReadSitaraba;\r\n}());\r\n/**\r\n * 取得したレスポンス（複数）のパース\r\n * @param res\r\n */\r\nvar parseNewResponse = function (res) {\r\n    //結果を格納する配列\r\n    var result = [];\r\n    // 新着レスを改行ごとにSplitする\r\n    var resArray = res.split(/\\r\\n|\\r|\\n/);\r\n    // 1行ごとにパースする\r\n    resArray.forEach(function (value) {\r\n        // パースメソッド呼び出し\r\n        if (value.length > 0) {\r\n            result.push(purseResponse(value));\r\n        }\r\n    });\r\n    return result;\r\n};\r\n/**\r\n * スレ一覧のパース\r\n * @param String // res レスポンス1レス\r\n * @param Integer // num レス番（0スタート）\r\n */\r\nvar parseThreadList = function (boardUrl, subjectLine) {\r\n    var _a, _b, _c, _d, _e;\r\n    //APIの返却値を<>で分割\r\n    //レスの要素\r\n    //0:dat名\r\n    //1:スレタイ（レス数）\r\n    var splitRes = subjectLine.split(',');\r\n    // log.debug(splitRes);\r\n    var datNum = splitRes[0].replace('.cgi', '');\r\n    var hostname = (_b = (_a = boardUrl.match(/^https?:\\/\\/.+?\\//)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\r\n    var boardName = boardUrl.replace(hostname, '');\r\n    var url = hostname + \"bbs/read.cgi/\" + boardName + datNum + \"/\";\r\n    // log.info(`${hostname}  ${boardName} ${datNum}`);\r\n    var titleTemp = splitRes[1];\r\n    var name = (_d = (_c = titleTemp.match(/(.*?)\\(\\d+\\)$/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '★取得失敗★';\r\n    var resNum = Number((_e = titleTemp.match(/\\(\\d+\\)$/)) === null || _e === void 0 ? void 0 : _e[0].replace(/\\(|\\)/g, ''));\r\n    // オブジェクトを返却\r\n    return {\r\n        url: url,\r\n        name: name,\r\n        resNum: resNum,\r\n    };\r\n};\r\n/**\r\n * レスポンスのパース\r\n * Jsonオブジェクトを返却する\r\n * @param String // res レスポンス1レス\r\n */\r\nvar purseResponse = function (res) {\r\n    //APIの返却値を<>で分割\r\n    //レスの要素\r\n    //0:レス番号\r\n    //1:名前\r\n    //2:メアド\r\n    //3:日付\r\n    //4:本文\r\n    //5:スレタイ\r\n    //6:ID\r\n    var splitRes = res.split('<>');\r\n    var resJson = {\r\n        number: splitRes[0],\r\n        name: splitRes[1],\r\n        email: splitRes[2],\r\n        date: splitRes[3],\r\n        text: splitRes[4],\r\n        threadTitle: splitRes[5] ? splitRes[5] : '',\r\n        id: splitRes[6],\r\n        imgUrl: '',\r\n        from: 'bbs',\r\n    };\r\n    // オブジェクトを返却\r\n    return resJson;\r\n};\r\n/** したらばだけは全角ダッシュがUnicode文字列として格納されるので変換する */\r\nvar decodeUnicodeStr = function (str) {\r\n    return str.replace(/&#65374;/g, '～');\r\n};\r\nexports.default = ReadSitaraba;\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createTranslateDom = exports.sendDom = exports.createDom = exports.findSeList = void 0;\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar express_1 = __importDefault(require(\"express\"));\r\nvar cors_1 = __importDefault(require(\"cors\"));\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar dank_twitch_irc_1 = require(\"dank-twitch-irc\");\r\nvar youtube_chat_1 = require(\"./youtube-chat\");\r\nvar electron_1 = require(\"electron\");\r\nvar express_ws_1 = __importDefault(require(\"express-ws\"));\r\nvar util_1 = require(\"./util\");\r\n// レス取得APIをセット\r\nvar getRes_1 = __importStar(require(\"./getRes\"));\r\nvar bouyomi_chan_1 = __importDefault(require(\"./bouyomi-chan\"));\r\nvar child_process_1 = require(\"child_process\");\r\nvar const_1 = require(\"./const\");\r\nvar niconama_1 = __importDefault(require(\"./niconama\"));\r\nvar jpnkn_1 = __importDefault(require(\"./jpnkn\"));\r\nvar googletrans_1 = __importDefault(require(\"googletrans\"));\r\nvar app;\r\n// サーバーをグローバル変数にセットできるようにする（サーバー停止処理のため）\r\nvar server;\r\n/** 棒読みちゃんインスタンス */\r\nvar bouyomi;\r\n/** スレッド定期取得実行するか */\r\nvar threadIntervalEvent = false;\r\n/** キュー処理実行するか */\r\nvar isExecuteQue = false;\r\n/** 接続中の全WebSocket */\r\nvar aWss;\r\nvar serverId = 0;\r\n/**\r\n * 設定の適用\r\n */\r\nelectron_1.ipcMain.on(const_1.electronEvent.APPLY_CONFIG, function (event, config) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var isChangedUrl, isChangeSePath, ret;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                electron_log_1.default.info('[apply-config] start');\r\n                electron_log_1.default.info(config);\r\n                isChangedUrl = globalThis.config.url !== config.url;\r\n                isChangeSePath = globalThis.config.sePath !== config.sePath;\r\n                globalThis.config = config;\r\n                if (!isChangeSePath) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, exports.findSeList()];\r\n            case 1:\r\n                _a.sent();\r\n                _a.label = 2;\r\n            case 2:\r\n                // initメッセージ\r\n                resetInitMessage();\r\n                if (!isChangedUrl) return [3 /*break*/, 4];\r\n                return [4 /*yield*/, getRes_1.getRes(globalThis.config.url, NaN)];\r\n            case 3:\r\n                ret = _a.sent();\r\n                electron_log_1.default.debug(ret);\r\n                if (ret.length === 0) {\r\n                    globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.SHOW_ALERT, '掲示板URLがおかしそうです');\r\n                    return [2 /*return*/];\r\n                }\r\n                globalThis.electron.threadNumber = Number(ret[ret.length - 1].number);\r\n                electron_log_1.default.info(\"[apply-config] new res num is \" + globalThis.electron.threadNumber);\r\n                // チャットウィンドウとブラウザに、末尾のスレだけ反映する\r\n                exports.sendDom([ret[ret.length - 1]]);\r\n                // スレタイ更新\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'bbs', category: 'title', message: ret[0].threadTitle });\r\n                _a.label = 4;\r\n            case 4: return [2 /*return*/];\r\n        }\r\n    });\r\n}); });\r\n/**\r\n * サーバー起動\r\n */\r\nelectron_1.ipcMain.on(const_1.electronEvent.START_SERVER, function (event, config) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var expressApp, expressInstance, nico, jpn;\r\n    return __generator(this, function (_a) {\r\n        globalThis.electron.chatWindow.webContents.send(const_1.electronEvent.CLEAR_COMMENT);\r\n        globalThis.electron.translateWindow.webContents.send(const_1.electronEvent.CLEAR_COMMENT);\r\n        globalThis.electron.threadNumber = 0;\r\n        globalThis.electron.commentQueueList = [];\r\n        globalThis.electron.threadConnectionError = 0;\r\n        serverId = new Date().getTime();\r\n        expressApp = express_1.default();\r\n        expressApp.use(cors_1.default());\r\n        expressInstance = express_ws_1.default(expressApp);\r\n        app = expressInstance.app;\r\n        aWss = expressInstance.getWss();\r\n        app.set('view engine', 'ejs');\r\n        // viewディレクトリの指定\r\n        app.set('views', path_1.default.resolve(__dirname, '../views'));\r\n        // 設定情報をグローバル変数へセットする\r\n        globalThis.config = config;\r\n        electron_log_1.default.debug('[startServer]設定値 = ');\r\n        electron_log_1.default.debug(globalThis.config);\r\n        app.get('/', function (req, res, next) {\r\n            res.render('server', config);\r\n            req.connection.end();\r\n        });\r\n        // サーバー設定のIF\r\n        app.get('/config', function (req, res, next) {\r\n            res.send(JSON.stringify(globalThis.config));\r\n        });\r\n        // 静的コンテンツはpublicディレクトリの中身を使用するという宣言\r\n        app.use(express_1.default.static(path_1.default.resolve(__dirname, '../public')));\r\n        // 2ch互換掲示板の取得\r\n        app.use('/getRes', getRes_1.default);\r\n        // SEを取得する\r\n        if (globalThis.config.sePath) {\r\n            exports.findSeList();\r\n        }\r\n        // Twitchに接続\r\n        if (globalThis.config.twitchId) {\r\n            startTwitchChat();\r\n        }\r\n        // Youtubeチャット\r\n        if (globalThis.config.youtubeId || globalThis.config.youtubeLiveId) {\r\n            startYoutubeChat();\r\n        }\r\n        // ニコ生\r\n        if (globalThis.config.niconicoId) {\r\n            nico = new niconama_1.default({ communityId: globalThis.config.niconicoId });\r\n            globalThis.electron.niconicoChat = nico;\r\n            nico.on('start', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'niconico', category: 'status', message: \"connection waiting\" });\r\n            });\r\n            nico.on('wait', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'niconico', category: 'status', message: \"wait for starting boradcast\" });\r\n            });\r\n            nico.on('open', function (event) {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'niconico',\r\n                    category: 'status',\r\n                    message: \"ok No=\" + event.number,\r\n                });\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'niconico',\r\n                    category: 'liveId',\r\n                    message: \"\" + event.liveId,\r\n                });\r\n            });\r\n            nico.on('comment', function (event) {\r\n                globalThis.electron.commentQueueList.push({ imgUrl: './img/niconico.png', number: event.number, name: event.name, text: event.comment, from: 'niconico' });\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'niconico',\r\n                    category: 'status',\r\n                    message: \"ok No=\" + event.number,\r\n                });\r\n            });\r\n            // 切断とか枠終了とか\r\n            nico.on('end', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'niconico',\r\n                    category: 'status',\r\n                    message: \"disconnect\",\r\n                });\r\n            });\r\n            nico.on('error', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'niconico', category: 'status', message: \"error\" });\r\n            });\r\n            nico.start();\r\n        }\r\n        // jpnkn\r\n        if (globalThis.config.jpnknFastBoardId) {\r\n            jpn = new jpnkn_1.default(globalThis.config.jpnknFastBoardId);\r\n            globalThis.electron.jpnknFast = jpn;\r\n            jpn.on('start', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'jpnkn', category: 'status', message: \"connection waiting\" });\r\n            });\r\n            jpn.on('open', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'jpnkn',\r\n                    category: 'status',\r\n                    message: \"ok\",\r\n                });\r\n            });\r\n            jpn.on('comment', function (event) {\r\n                globalThis.electron.commentQueueList.push(event);\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'jpnkn',\r\n                    category: 'status',\r\n                    message: \"ok No=\" + event.number,\r\n                });\r\n            });\r\n            // 切断とか枠終了とか\r\n            jpn.on('end', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, {\r\n                    commentType: 'jpnkn',\r\n                    category: 'status',\r\n                    message: \"disconnect\",\r\n                });\r\n            });\r\n            jpn.on('error', function () {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'jpnkn', category: 'status', message: \"error\" });\r\n            });\r\n            jpn.start();\r\n        }\r\n        // 棒読みちゃん接続\r\n        if (config.typeYomiko === 'bouyomi') {\r\n            if (config.bouyomiPort) {\r\n                bouyomi = new bouyomi_chan_1.default({ port: config.bouyomiPort, volume: config.bouyomiVolume, prefix: config.bouyomiPrefix });\r\n            }\r\n        }\r\n        // レス取得定期実行\r\n        threadIntervalEvent = true;\r\n        getResInterval(serverId);\r\n        // キュー処理の開始\r\n        isExecuteQue = true;\r\n        taskScheduler(serverId);\r\n        if (globalThis.config.translate.enable) {\r\n            globalThis.electron.translateWindow.focus();\r\n            translateTaskScheduler(serverId);\r\n        }\r\n        // WebSocketを立てる\r\n        app.ws('/ws', function (ws, req) {\r\n            ws.on('message', function (message) {\r\n                electron_log_1.default.debug('Received: ' + message.toString());\r\n                if (message.toString() === 'ping') {\r\n                    ws.send('pong');\r\n                }\r\n            });\r\n            ws.on('close', function () {\r\n                electron_log_1.default.debug('I lost a client');\r\n            });\r\n        });\r\n        // 指定したポートで待ち受け開始\r\n        server = app.listen(config.port, function () {\r\n            electron_log_1.default.debug('[startServer] start server on port:' + config.port);\r\n        });\r\n        // 成功メッセージ返却\r\n        event.returnValue = 'success';\r\n        return [2 /*return*/];\r\n    });\r\n}); });\r\nelectron_1.ipcMain.on(const_1.electronEvent.COMMENT_TEST, function (event, config) { return __awaiter(void 0, void 0, void 0, function () {\r\n    return __generator(this, function (_a) {\r\n        globalThis.config = config;\r\n        return [2 /*return*/, commentTest()];\r\n    });\r\n}); });\r\nvar commentTest = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    var textList, text;\r\n    return __generator(this, function (_a) {\r\n        // コメントテスト\r\n        try {\r\n            textList = [\r\n                'ﾃｽﾃｽｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗ',\r\n                '∈(･ω･)∋ ﾀﾞﾑｰ',\r\n                'おめーらいつまで経っても<br/>ピアキャストかよ',\r\n                \"Hello everyone!<br/>I'm Unacast<br/><br/>Yes.\",\r\n            ];\r\n            text = textList[Math.floor(Math.random() * textList.length)];\r\n            exports.sendDom([\r\n                {\r\n                    id: '100',\r\n                    name: 'ななしさん',\r\n                    text: text,\r\n                    imgUrl: './img/unacast.png',\r\n                    from: 'bbs',\r\n                },\r\n            ]);\r\n        }\r\n        catch (e) {\r\n            electron_log_1.default.debug(e);\r\n        }\r\n        return [2 /*return*/];\r\n    });\r\n}); };\r\nvar findSeList = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    var list, e_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 4, , 5]);\r\n                if (!globalThis.config.sePath) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, util_1.readWavFiles(globalThis.config.sePath)];\r\n            case 1:\r\n                list = _a.sent();\r\n                globalThis.electron.seList = list.map(function (file) { return globalThis.config.sePath + \"/\" + file; });\r\n                electron_log_1.default.debug(\"SE files = \" + globalThis.electron.seList.length);\r\n                return [3 /*break*/, 3];\r\n            case 2:\r\n                globalThis.electron.seList = [];\r\n                _a.label = 3;\r\n            case 3: return [3 /*break*/, 5];\r\n            case 4:\r\n                e_1 = _a.sent();\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.SHOW_ALERT, '着信音のパスがおかしそうです');\r\n                return [3 /*break*/, 5];\r\n            case 5: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexports.findSeList = findSeList;\r\n/**\r\n * Twitchチャットに接続\r\n * @description 再接続処理はライブラリが勝手にやってくれる\r\n */\r\nvar startTwitchChat = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    var twitchChat;\r\n    return __generator(this, function (_a) {\r\n        try {\r\n            twitchChat = new dank_twitch_irc_1.ChatClient();\r\n            twitchChat.connect();\r\n            twitchChat.join(globalThis.config.twitchId);\r\n            globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: 'wait live' });\r\n            // 接続完了\r\n            twitchChat.on('ready', function () {\r\n                electron_log_1.default.debug('[Twitch] Successfully connected to chat');\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: 'ok' });\r\n            });\r\n            // チャット受信\r\n            twitchChat.on('PRIVMSG', function (msg) {\r\n                electron_log_1.default.info('[Twitch] comment received');\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: 'ok' });\r\n                // log.info(JSON.stringify(msg, null, '  '));\r\n                var imgUrl = './img/twitch.png';\r\n                var name = util_1.escapeHtml(msg.displayName);\r\n                var text = util_1.escapeHtml(msg.messageText);\r\n                // エモートを画像タグにする\r\n                msg.emotes.map(function (emote) {\r\n                    text = text.replace(emote.code, \"<img src=\\\"https://static-cdn.jtvnw.net/emoticons/v1/\" + emote.id + \"/1.0\\\" />\");\r\n                });\r\n                globalThis.electron.commentQueueList.push({ imgUrl: imgUrl, name: name, text: text, from: 'twitch' });\r\n            });\r\n            globalThis.electron.twitchChat = twitchChat;\r\n            // なんかエラーがあった\r\n            twitchChat.on('error', function (event) {\r\n                electron_log_1.default.error(\"[Twitch] \" + JSON.stringify(event));\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: 'error!' });\r\n            });\r\n            twitchChat.on('close', function (event) {\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: 'connection end' });\r\n            });\r\n        }\r\n        catch (e) {\r\n            electron_log_1.default.error(e);\r\n            globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: 'error!' });\r\n        }\r\n        return [2 /*return*/];\r\n    });\r\n}); };\r\n/** Youtubeチャットに接続 */\r\nvar startYoutubeChat = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    var createYoutubeComment_1;\r\n    return __generator(this, function (_a) {\r\n        try {\r\n            electron_log_1.default.info('[Youtube Chat] connect started');\r\n            if (globalThis.config.youtubeLiveId) {\r\n                globalThis.electron.youtubeChat = new youtube_chat_1.LiveChat({ liveId: globalThis.config.youtubeLiveId });\r\n            }\r\n            else {\r\n                globalThis.electron.youtubeChat = new youtube_chat_1.LiveChat({ channelId: globalThis.config.youtubeId });\r\n            }\r\n            globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: 'wait live' });\r\n            // 接続開始イベント\r\n            globalThis.electron.youtubeChat.on('start', function (liveId) {\r\n                electron_log_1.default.info(\"[Youtube Chat] connected liveId = \" + liveId);\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'liveid', message: liveId });\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: 'ok' });\r\n            });\r\n            // 接続終了イベント\r\n            globalThis.electron.youtubeChat.on('end', function (reason) {\r\n                electron_log_1.default.info('[Youtube Chat] disconnect');\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: 'connection end' });\r\n            });\r\n            createYoutubeComment_1 = function (comment) {\r\n                var _a, _b;\r\n                // log.info(JSON.stringify(comment, null, '  '));\r\n                var imgUrl = (_b = (_a = comment.author.thumbnail) === null || _a === void 0 ? void 0 : _a.url) !== null && _b !== void 0 ? _b : '';\r\n                var name = util_1.escapeHtml(comment.author.name);\r\n                // 絵文字と結合する\r\n                var text = '';\r\n                for (var _i = 0, _c = comment.message; _i < _c.length; _i++) {\r\n                    var message = _c[_i];\r\n                    var txtItem = message.text;\r\n                    if (txtItem) {\r\n                        text += util_1.escapeHtml(txtItem);\r\n                    }\r\n                    else {\r\n                        var imageItem = message;\r\n                        text += \"<img src=\\\"\" + imageItem.url + \"\\\" width=\\\"\" + 24 + \"\\\" height=\\\"\" + 24 + \"\\\" />\";\r\n                    }\r\n                }\r\n                // const text = escapeHtml((comment.message[0] as any).text);\r\n                return { imgUrl: imgUrl, name: name, text: text, from: 'youtube' };\r\n            };\r\n            // 初期チャット受信\r\n            globalThis.electron.youtubeChat.on('firstComment', function (comment) {\r\n                electron_log_1.default.info('[Youtube] comment received');\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: 'ok' });\r\n                // チャットウィンドウだけに出力\r\n                sendDomForChatWindow([createYoutubeComment_1(comment)]);\r\n            });\r\n            // チャット受信\r\n            globalThis.electron.youtubeChat.on('comment', function (comment) {\r\n                electron_log_1.default.info('[Youtube] comment received');\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: 'ok' });\r\n                globalThis.electron.commentQueueList.push(createYoutubeComment_1(comment));\r\n            });\r\n            // 何かエラーがあった\r\n            globalThis.electron.youtubeChat.on('error', function (err) {\r\n                electron_log_1.default.error(\"[Youtube Chat] \" + err.message);\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: \"error! \" + err.message });\r\n            });\r\n            globalThis.electron.youtubeChat.start();\r\n        }\r\n        catch (e) {\r\n            // たぶんここには来ない\r\n            electron_log_1.default.error(e);\r\n        }\r\n        return [2 /*return*/];\r\n    });\r\n}); };\r\n/**\r\n * サーバー停止\r\n */\r\nelectron_1.ipcMain.on(const_1.electronEvent.STOP_SERVER, function (event) {\r\n    electron_log_1.default.debug('[startServer] server stop');\r\n    server.close();\r\n    aWss.close();\r\n    app = null;\r\n    event.returnValue = 'stop';\r\n    // キュー処理停止\r\n    isExecuteQue = false;\r\n    globalThis.electron.commentQueueList = [];\r\n    // レス取得の停止\r\n    threadIntervalEvent = false;\r\n    globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'bbs', category: 'title', message: \"\" });\r\n    globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'bbs', category: 'status', message: \"connection end\" });\r\n    // Twitchチャットの停止\r\n    if (globalThis.electron.twitchChat) {\r\n        globalThis.electron.twitchChat.close();\r\n        globalThis.electron.twitchChat.removeAllListeners();\r\n        globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'twitch', category: 'status', message: \"connection end\" });\r\n    }\r\n    // Youtubeチャットの停止\r\n    if (globalThis.electron.youtubeChat) {\r\n        globalThis.electron.youtubeChat.stop();\r\n        globalThis.electron.youtubeChat.removeAllListeners();\r\n        globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'status', message: \"connection end\" });\r\n        globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'youtube', category: 'liveId', message: \"none\" });\r\n    }\r\n    // ニコ生チャットの停止\r\n    if (globalThis.electron.niconicoChat) {\r\n        globalThis.electron.niconicoChat.stop();\r\n        globalThis.electron.niconicoChat.removeAllListeners();\r\n        globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'niconico', category: 'status', message: \"connection end\" });\r\n        globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'niconico', category: 'liveId', message: \"none\" });\r\n    }\r\n    // jpnkn Fastインターフェース\r\n    if (globalThis.electron.jpnknFast) {\r\n        globalThis.electron.jpnknFast.stop();\r\n        globalThis.electron.jpnknFast.removeAllListeners();\r\n        globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'jpnkn', category: 'status', message: \"connection end\" });\r\n    }\r\n});\r\nvar getResInterval = function (exeId) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var resNum, isfirst, result, threadTitle, temp, _loop_1, _i, result_1, item;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                isfirst = false;\r\n                if (!(!globalThis.config.url && threadIntervalEvent && exeId === serverId)) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, util_1.sleep(globalThis.config.interval * 1000)];\r\n            case 1:\r\n                _a.sent();\r\n                getResInterval(exeId);\r\n                return [2 /*return*/];\r\n            case 2:\r\n                if (!globalThis.electron.threadNumber) {\r\n                    // 初回\r\n                    isfirst = true;\r\n                    resNum = NaN;\r\n                }\r\n                else {\r\n                    // 2回目以降\r\n                    resNum = globalThis.electron.threadNumber;\r\n                }\r\n                return [4 /*yield*/, getRes_1.getRes(globalThis.config.url, resNum)];\r\n            case 3:\r\n                result = _a.sent();\r\n                if (isfirst && result.length > 0) {\r\n                    threadTitle = result[0].threadTitle;\r\n                    globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'bbs', category: 'title', message: threadTitle });\r\n                }\r\n                // 指定したレス番以下は除外対象\r\n                if (resNum) {\r\n                    result = result.filter(function (res) { return (res.number ? Number(res.number) > resNum : true); });\r\n                }\r\n                if (result.length > 0 && result[result.length - 1].number) {\r\n                    globalThis.electron.threadNumber = Number(result[result.length - 1].number);\r\n                    if (isfirst) {\r\n                        temp = result;\r\n                        if (!globalThis.config.dispSort) {\r\n                            temp = temp.reverse();\r\n                        }\r\n                        sendDomForChatWindow(temp);\r\n                    }\r\n                    else {\r\n                        _loop_1 = function (item) {\r\n                            // リストに同じレス番があったら追加しない\r\n                            if (!globalThis.electron.commentQueueList.find(function (comment) { return comment.number === item.number; })) {\r\n                                globalThis.electron.commentQueueList.push(item);\r\n                            }\r\n                        };\r\n                        for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\r\n                            item = result_1[_i];\r\n                            _loop_1(item);\r\n                        }\r\n                    }\r\n                    globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'bbs', category: 'status', message: \"ok res=\" + globalThis.electron.threadNumber });\r\n                }\r\n                else if (result.length > 0) {\r\n                    globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.UPDATE_STATUS, { commentType: 'bbs', category: 'status', message: 'error!' });\r\n                    // 番号が無くて結果が入ってるのは通信エラーメッセージ\r\n                    sendDomForChatWindow(result);\r\n                }\r\n                return [4 /*yield*/, checkAutoMoveThread()];\r\n            case 4:\r\n                _a.sent();\r\n                return [4 /*yield*/, notifyThreadResLimit()];\r\n            case 5:\r\n                _a.sent();\r\n                if (!(threadIntervalEvent && exeId === serverId)) return [3 /*break*/, 7];\r\n                return [4 /*yield*/, util_1.sleep(globalThis.config.interval * 1000)];\r\n            case 6:\r\n                _a.sent();\r\n                getResInterval(exeId);\r\n                _a.label = 7;\r\n            case 7: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\n/** レス番が上限かチェックして、超えてたら通知する */\r\nvar notifyThreadResLimit = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                if (!(globalThis.config.notifyThreadResLimit > 0 && globalThis.electron.threadNumber >= globalThis.config.notifyThreadResLimit)) return [3 /*break*/, 2];\r\n                sendDomForChatWindow([\r\n                    {\r\n                        name: 'unacastより',\r\n                        imgUrl: './img/unacast.png',\r\n                        text: \"\\u30EC\\u30B9\\u304C\" + globalThis.config.notifyThreadResLimit + \"\\u3092\\u8D85\\u3048\\u307E\\u3057\\u305F\\u3002\\u6B21\\u30B9\\u30EC\\u3092\\u7ACB\\u3066\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\",\r\n                        from: 'system',\r\n                    },\r\n                ]);\r\n                // スレ立て中だと思うのでちょっと待つ\r\n                return [4 /*yield*/, util_1.sleep(10 * 1000)];\r\n            case 1:\r\n                // スレ立て中だと思うのでちょっと待つ\r\n                _a.sent();\r\n                _a.label = 2;\r\n            case 2: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nvar checkAutoMoveThread = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    var threadUrl, boardInfo, threadList, target;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                if (!globalThis.config.moveThread)\r\n                    return [2 /*return*/];\r\n                if (globalThis.electron.threadNumber < 1000)\r\n                    return [2 /*return*/];\r\n                threadUrl = globalThis.config.url;\r\n                return [4 /*yield*/, getRes_1.threadUrlToBoardInfo(threadUrl)];\r\n            case 1:\r\n                boardInfo = _a.sent();\r\n                return [4 /*yield*/, getRes_1.getThreadList(boardInfo.boardUrl)];\r\n            case 2:\r\n                threadList = _a.sent();\r\n                target = threadList.find(function (item) { return item.url !== threadUrl && item.resNum < 1000; });\r\n                if (!target)\r\n                    return [2 /*return*/];\r\n                // 次スレが見つかったので移動する\r\n                globalThis.electron.commentQueueList.push({\r\n                    name: 'unacastより',\r\n                    imgUrl: './img/unacast.png',\r\n                    text: \"\\u30EC\\u30B91000\\u3092\\u8D85\\u3048\\u307E\\u3057\\u305F\\u3002\\u6B21\\u30B9\\u30EC\\u5019\\u88DC \\u300C\" + target.name + \"\\u300D \\u306B\\u79FB\\u52D5\\u3057\\u307E\\u3059\",\r\n                    from: 'system',\r\n                });\r\n                globalThis.config.url = target.url;\r\n                globalThis.electron.threadNumber = 0;\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.SAVE_CONFIG, globalThis.config);\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\n/**\r\n * キューに溜まったコメントをブラウザに表示する\r\n */\r\nvar taskScheduler = function (exeId) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var temp, comment;\r\n    var _a;\r\n    var _b, _c, _d, _e;\r\n    return __generator(this, function (_f) {\r\n        switch (_f.label) {\r\n            case 0:\r\n                if (!(((_c = (_b = globalThis.electron) === null || _b === void 0 ? void 0 : _b.commentQueueList) === null || _c === void 0 ? void 0 : _c.length) > 0)) return [3 /*break*/, 3];\r\n                electron_log_1.default.info(\"[taskScheduler] \" + ((_e = (_d = globalThis.electron) === null || _d === void 0 ? void 0 : _d.commentQueueList) === null || _e === void 0 ? void 0 : _e.length));\r\n                if (!(globalThis.config.commentProcessType === 0)) return [3 /*break*/, 1];\r\n                temp = __spreadArrays(globalThis.electron.commentQueueList);\r\n                globalThis.electron.commentQueueList = [];\r\n                // 新着が上の場合は逆順にする\r\n                if (!globalThis.config.dispSort) {\r\n                    temp = temp.reverse();\r\n                }\r\n                exports.sendDom(temp);\r\n                if (globalThis.config.translate.enable) {\r\n                    (_a = globalThis.electron.translateQueueList).push.apply(_a, temp);\r\n                }\r\n                return [3 /*break*/, 3];\r\n            case 1:\r\n                comment = globalThis.electron.commentQueueList.shift();\r\n                return [4 /*yield*/, exports.sendDom([comment])];\r\n            case 2:\r\n                _f.sent();\r\n                if (globalThis.config.translate.enable) {\r\n                    globalThis.electron.translateQueueList.push(comment);\r\n                }\r\n                _f.label = 3;\r\n            case 3:\r\n                if (!(isExecuteQue && exeId === serverId)) return [3 /*break*/, 5];\r\n                return [4 /*yield*/, util_1.sleep(100)];\r\n            case 4:\r\n                _f.sent();\r\n                taskScheduler(exeId);\r\n                _f.label = 5;\r\n            case 5: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\n/**\r\n * キューに溜まったコメントをブラウザに表示する\r\n */\r\nvar translateTaskScheduler = function (exeId) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var comment;\r\n    var _a, _b, _c, _d;\r\n    return __generator(this, function (_e) {\r\n        switch (_e.label) {\r\n            case 0:\r\n                if (!(((_b = (_a = globalThis.electron) === null || _a === void 0 ? void 0 : _a.translateQueueList) === null || _b === void 0 ? void 0 : _b.length) > 0)) return [3 /*break*/, 4];\r\n                electron_log_1.default.info(\"[translateTaskScheduler] \" + ((_d = (_c = globalThis.electron) === null || _c === void 0 ? void 0 : _c.translateQueueList) === null || _d === void 0 ? void 0 : _d.length));\r\n                comment = globalThis.electron.translateQueueList.shift();\r\n                if (!(globalThis.config.translate.targetLang === 'ja' && !util_1.isNihongo(comment.text))) return [3 /*break*/, 2];\r\n                // 日本語が1文字も入ってなければ翻訳する\r\n                return [4 /*yield*/, sendDomForTranslateWindow(comment)];\r\n            case 1:\r\n                // 日本語が1文字も入ってなければ翻訳する\r\n                _e.sent();\r\n                return [3 /*break*/, 4];\r\n            case 2:\r\n                if (!(globalThis.config.translate.targetLang === 'en')) return [3 /*break*/, 4];\r\n                // 英語オンリーってどうやって簡易的に判断するのかよくわからないので全部翻訳する\r\n                return [4 /*yield*/, sendDomForTranslateWindow(comment)];\r\n            case 3:\r\n                // 英語オンリーってどうやって簡易的に判断するのかよくわからないので全部翻訳する\r\n                _e.sent();\r\n                _e.label = 4;\r\n            case 4:\r\n                if (!(isExecuteQue && exeId === serverId)) return [3 /*break*/, 6];\r\n                return [4 /*yield*/, util_1.sleep(500)];\r\n            case 5:\r\n                _e.sent();\r\n                translateTaskScheduler(exeId);\r\n                _e.label = 6;\r\n            case 6: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\n/** 読み子によって発話中であるか */\r\nvar isSpeaking = false;\r\n/** 読み子を再生する */\r\nvar playYomiko = function (msg) { return __awaiter(void 0, void 0, void 0, function () {\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                // log.info('[playYomiko] start');\r\n                isSpeaking = true;\r\n                // 読み子呼び出し\r\n                switch (config.typeYomiko) {\r\n                    case 'tamiyasu': {\r\n                        electron_log_1.default.debug(config.tamiyasuPath + \" \\\"\" + msg + \"\\\"\");\r\n                        child_process_1.spawn(config.tamiyasuPath, [msg]);\r\n                        break;\r\n                    }\r\n                    case 'bouyomi': {\r\n                        if (bouyomi)\r\n                            bouyomi.speak(msg);\r\n                        break;\r\n                    }\r\n                }\r\n                // 読み子が読んでる時間分相当待つ\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.WAIT_YOMIKO_TIME, msg);\r\n                _a.label = 1;\r\n            case 1:\r\n                if (!isSpeaking) return [3 /*break*/, 3];\r\n                return [4 /*yield*/, util_1.sleep(50)];\r\n            case 2:\r\n                _a.sent();\r\n                return [3 /*break*/, 1];\r\n            case 3: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nelectron_1.ipcMain.on(const_1.electronEvent.SPEAKING_END, function (event) { return (isSpeaking = false); });\r\nvar isPlayingSe = false;\r\nvar playSe = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    var wavfilepath;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                wavfilepath = globalThis.electron.seList[Math.floor(Math.random() * globalThis.electron.seList.length)];\r\n                isPlayingSe = true;\r\n                globalThis.electron.mainWindow.webContents.send(const_1.electronEvent.PLAY_SOUND_START, { wavfilepath: wavfilepath, volume: globalThis.config.playSeVolume });\r\n                _a.label = 1;\r\n            case 1:\r\n                if (!isPlayingSe) return [3 /*break*/, 3];\r\n                return [4 /*yield*/, util_1.sleep(50)];\r\n            case 2:\r\n                _a.sent();\r\n                return [3 /*break*/, 1];\r\n            case 3: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nelectron_1.ipcMain.on(const_1.electronEvent.PLAY_SOUND_END, function (event) { return (isPlayingSe = false); });\r\nvar createDom = function (message, type, isAA) {\r\n    var domStr = \"<li class=\\\"list-item\\\">\";\r\n    /** レス番とかの行が何かしら表示対象になっているか */\r\n    var isResNameShowed = false;\r\n    // アイコン表示\r\n    if (globalThis.config.showIcon) {\r\n        domStr += \"\\n    <span class=\\\"icon-block\\\">\\n      <img class=\\\"icon\\\" src=\\\"\" + message.imgUrl + \"\\\">\\n    </span>\\n    \";\r\n        isResNameShowed = true;\r\n    }\r\n    domStr += \"<div class=\\\"content\\\">\";\r\n    // レス番表示\r\n    if (globalThis.config.showNumber && message.number) {\r\n        domStr += \"\\n      <span class=\\\"resNumber\\\">\" + message.number + \"</span>\\n    \";\r\n        isResNameShowed = true;\r\n    }\r\n    // 名前表示\r\n    if (globalThis.config.showName && message.name) {\r\n        domStr += \"<span class=\\\"name\\\">\" + message.name + \"</span>\";\r\n        isResNameShowed = true;\r\n    }\r\n    // 時刻表示\r\n    if (globalThis.config.showTime && message.date) {\r\n        domStr += \"<span class=\\\"date\\\">\" + message.date + \"</span>\";\r\n        isResNameShowed = true;\r\n    }\r\n    // 名前と本文を改行で分ける\r\n    // 名前や時刻の行が一つも無ければ、改行しない\r\n    if (globalThis.config.newLine && isResNameShowed) {\r\n        domStr += '<br />';\r\n    }\r\n    else if (globalThis.config.aamode.enable && isAA) {\r\n        // AAモードがオンで対象がAAなら強制的に改行する\r\n        domStr += '<br />';\r\n    }\r\n    // リンクを整形する\r\n    var text = message.text\r\n        .replace(/<a .*?>/g, '') // したらばはアンカーをaタグ化している\r\n        .replace(/<\\\\a>/g, '');\r\n    // httpの直前に英数字記号が無い箇所を置換\r\n    var reg = new RegExp(\"(h?ttps?(://[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+))\", 'g');\r\n    // FIXME: imgタグへの誤爆を雑に回避\r\n    var tempText = text.replace(/\"http/g, '★★★★http★★★★');\r\n    var commentText = tempText.replace(reg, '<span class=\"url\" onClick=\\'urlopen(\"$1\")\\'>$1</span>');\r\n    commentText = commentText.replace(/★★★★http★★★★/g, '\"http');\r\n    if (isAA) {\r\n        domStr += \"\\n    <span class=\\\"aares\\\">\\n      \" + commentText + \"\\n    </span>\\n  \";\r\n    }\r\n    else {\r\n        domStr += \"\\n    <span class=\\\"res\\\">\\n      \" + commentText + \"\\n    </span>\\n  \";\r\n    }\r\n    // サムネイル表示\r\n    var isThumbnailShow = (globalThis.config.thumbnail == 1 && type === 'chat') || globalThis.config.thumbnail == 2;\r\n    if (isThumbnailShow) {\r\n        var imgreg = new RegExp(\"(h?ttps?(://[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+)(.jpg|.png|.gif))\", 'g');\r\n        var imgUrls_2 = [];\r\n        var matched = text.match(imgreg);\r\n        if (matched) {\r\n            matched.map(function (value) {\r\n                // log.info(value);\r\n                imgUrls_2.push(value);\r\n            });\r\n        }\r\n        if (imgUrls_2.length > 0) {\r\n            domStr += '<div class=\"thumbnail\">';\r\n            domStr += imgUrls_2\r\n                .map(function (url) {\r\n                var tmp = url;\r\n                if (tmp.match(/^ttp/)) {\r\n                    tmp = \"h\" + tmp;\r\n                }\r\n                return \"<img class=\\\"img\\\" src=\\\"\" + tmp + \"\\\" onClick='imageopen(\\\"\" + tmp + \"\\\")' />\";\r\n            })\r\n                .join('');\r\n            domStr += '</div>';\r\n            // 画像URL非表示が有効なら消す\r\n            if (globalThis.config.hideImgUrl) {\r\n                for (var _i = 0, imgUrls_1 = imgUrls_2; _i < imgUrls_1.length; _i++) {\r\n                    var imgurl = imgUrls_1[_i];\r\n                    // log.info('非表示するぞ ' + imgurl);\r\n                    domStr = domStr.replace(\"<span class=\\\"url\\\" onClick='urlopen(\\\"\" + imgurl + \"\\\")'>\" + imgurl + \"</span>\", '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 〆\r\n    domStr += \"</div>\\n  </li>\";\r\n    return domStr;\r\n};\r\nexports.createDom = createDom;\r\n/**\r\n * コメントのDOMをブラウザに送る\r\n * 必要ならレス着信音も鳴らす\r\n * @param message\r\n */\r\nvar sendDom = function (messageList) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var newList, domStr, socketObject_1, lastIdx, text, e_2;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 9, , 10]);\r\n                newList = util_1.judgeAaMessage(messageList);\r\n                domStr = newList.map(function (message) { return exports.createDom(message, 'server', message.isAA); }).join('\\n');\r\n                socketObject_1 = {\r\n                    type: 'add',\r\n                    message: domStr,\r\n                };\r\n                if (aWss) {\r\n                    aWss.clients.forEach(function (client) {\r\n                        client.send(JSON.stringify(socketObject_1));\r\n                    });\r\n                }\r\n                // レンダラーのコメント一覧にも表示\r\n                sendDomForChatWindow(newList);\r\n                if (!(config.playSe && globalThis.electron.seList.length > 0)) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, playSe()];\r\n            case 1:\r\n                _a.sent();\r\n                _a.label = 2;\r\n            case 2:\r\n                if (!(globalThis.config.typeYomiko !== 'none')) return [3 /*break*/, 6];\r\n                lastIdx = newList.length - 1;\r\n                if (!(newList[lastIdx].isAA && config.aamode.enable)) return [3 /*break*/, 4];\r\n                return [4 /*yield*/, playYomiko(config.aamode.speakWord)];\r\n            case 3:\r\n                _a.sent();\r\n                return [3 /*break*/, 6];\r\n            case 4:\r\n                text = newList[lastIdx].text.replace(/<br> /g, '\\n ').replace(/<br>/g, '\\n ');\r\n                text = text.replace(/<img.*?\\/>/g, '');\r\n                text = text.replace(/<a .*?>/g, '').replace(/<\\/a>/g, '');\r\n                text = util_1.unescapeHtml(text);\r\n                if (globalThis.config.yomikoReplaceNewline) {\r\n                    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\r\n                }\r\n                // レス番号を読み上げる\r\n                if (config.yomikoReadResNumber && newList[lastIdx].number) {\r\n                    text = \"\\u30EC\\u30B9\" + newList[lastIdx].number + \"\\n\" + text;\r\n                }\r\n                return [4 /*yield*/, playYomiko(text)];\r\n            case 5:\r\n                _a.sent();\r\n                _a.label = 6;\r\n            case 6:\r\n                if (!(globalThis.config.dispType === 1)) return [3 /*break*/, 8];\r\n                return [4 /*yield*/, util_1.sleep(globalThis.config.minDisplayTime * 1000)];\r\n            case 7:\r\n                _a.sent();\r\n                _a.label = 8;\r\n            case 8:\r\n                // 鳴らし終わって読み子が終わった\r\n                resetInitMessage();\r\n                return [3 /*break*/, 10];\r\n            case 9:\r\n                e_2 = _a.sent();\r\n                electron_log_1.default.error(e_2);\r\n                return [3 /*break*/, 10];\r\n            case 10: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexports.sendDom = sendDom;\r\n/** チャットウィンドウへのコメント表示 */\r\nvar sendDomForChatWindow = function (messageList) {\r\n    var domStr2 = util_1.judgeAaMessage(messageList)\r\n        .map(function (message) {\r\n        var imgUrl = message.imgUrl && message.imgUrl.match(/^\\./) ? '../../public/' + message.imgUrl : message.imgUrl;\r\n        return __assign(__assign({}, message), { imgUrl: imgUrl });\r\n    })\r\n        .map(function (message) { return exports.createDom(message, 'chat', message.isAA); })\r\n        .join('\\n');\r\n    globalThis.electron.chatWindow.webContents.send(const_1.electronEvent.SHOW_COMMENT, { config: globalThis.config, dom: domStr2 });\r\n};\r\nvar resetInitMessage = function () {\r\n    if (globalThis.config.dispType === 1) {\r\n        var resetObj_1 = {\r\n            type: 'reset',\r\n            message: globalThis.config.initMessage,\r\n        };\r\n        aWss.clients.forEach(function (client) {\r\n            client.send(JSON.stringify(resetObj_1));\r\n        });\r\n    }\r\n};\r\nvar createTranslateDom = function (message, translated) {\r\n    var domStr = \"<li class=\\\"list-item\\\">\";\r\n    /** レス番とかの行が何かしら表示対象になっているか */\r\n    var isResNameShowed = false;\r\n    // アイコン表示\r\n    if (globalThis.config.showIcon) {\r\n        domStr += \"\\n    <span class=\\\"icon-block\\\">\\n      <img class=\\\"icon\\\" src=\\\"\" + message.imgUrl + \"\\\">\\n    </span>\\n    \";\r\n    }\r\n    domStr += \"<div class=\\\"content\\\">\";\r\n    // レス番表示\r\n    if (globalThis.config.showNumber && message.number) {\r\n        domStr += \"\\n      <span class=\\\"resNumber\\\">\" + message.number + \"</span>\\n    \";\r\n        isResNameShowed = true;\r\n    }\r\n    // 名前表示\r\n    if (globalThis.config.showName && message.name) {\r\n        domStr += \"<span class=\\\"name\\\">\" + message.name + \"</span>\";\r\n        isResNameShowed = true;\r\n    }\r\n    // 時刻表示\r\n    if (globalThis.config.showTime && message.date) {\r\n        domStr += \"<span class=\\\"date\\\">\" + message.date + \"</span>\";\r\n        isResNameShowed = true;\r\n    }\r\n    // 名前と本文を改行で分ける\r\n    // 名前や時刻の行が一つも無ければ、改行しない\r\n    if (isResNameShowed) {\r\n        domStr += '<br />';\r\n    }\r\n    electron_log_1.default.info(translated + \"   ---  \" + message.text);\r\n    domStr += \"\\n  <div class=\\\"res\\\">\\n    \" + translated + \"\\n  </div>\\n  <hr style=\\\"margin: 1px;border-top: 1px solid black\\\" />\\n  <span class=\\\"res-org\\\">\\n    \" + message.text + \"\\n  </span>\\n\";\r\n    // 〆\r\n    domStr += \"</div>\\n  </li>\";\r\n    return domStr;\r\n};\r\nexports.createTranslateDom = createTranslateDom;\r\n/** 翻訳ウィンドウへのコメント表示 */\r\nvar sendDomForTranslateWindow = function (message) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var reg, orgText, translated, domStr, e_3;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                electron_log_1.default.info('[sendDomForTranslateWindow]');\r\n                message.imgUrl = message.imgUrl && message.imgUrl.match(/^\\./) ? '../../public/' + message.imgUrl : message.imgUrl;\r\n                _a.label = 1;\r\n            case 1:\r\n                _a.trys.push([1, 3, , 4]);\r\n                reg = new RegExp(\"(h?ttps?(://[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+))\", 'g');\r\n                orgText = message.text\r\n                    .replace(/<a .*?>/g, '')\r\n                    .replace(/<\\\\a>/g, '')\r\n                    .replace(/<img .*?>/g, '')\r\n                    .replace(/<\\\\img>/g, '')\r\n                    .replace(reg, '')\r\n                    .trim();\r\n                return [4 /*yield*/, googletrans_1.default(util_1.unescapeHtml(orgText), {\r\n                        to: globalThis.config.translate.targetLang,\r\n                        from: 'auto',\r\n                        tld: globalThis.config.translate.targetLang === 'ja' ? 'co.jp' : 'com',\r\n                    })];\r\n            case 2:\r\n                translated = _a.sent();\r\n                electron_log_1.default.info(translated.text);\r\n                // もし何もテキストとして残らなかったら表示しない\r\n                if (!translated.text)\r\n                    return [2 /*return*/, ''];\r\n                domStr = exports.createTranslateDom(__assign(__assign({}, message), { text: orgText }), util_1.escapeHtml(translated.text));\r\n                globalThis.electron.translateWindow.webContents.send(const_1.electronEvent.SHOW_COMMENT_TL, { config: globalThis.config, dom: domStr });\r\n                return [3 /*break*/, 4];\r\n            case 3:\r\n                e_3 = _a.sent();\r\n                electron_log_1.default.error(JSON.stringify(e_3));\r\n                globalThis.electron.translateWindow.webContents.send(const_1.electronEvent.SHOW_COMMENT_TL, { config: globalThis.config, dom: '<div>翻訳でエラー</div>' });\r\n                return [3 /*break*/, 4];\r\n            case 4: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nelectron_1.ipcMain.on(const_1.electronEvent.PREVIEW_IMAGE, function (event, url) {\r\n    globalThis.electron.imagePreviewWindow.webContents.send(const_1.electronEvent.PREVIEW_IMAGE, url);\r\n    globalThis.electron.imagePreviewWindow.show();\r\n});\r\nexports.default = {};\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isNihongo = exports.judgeAaMessage = exports.unescapeHtml = exports.escapeHtml = exports.sleep = exports.readWavFiles = void 0;\r\nvar fs_1 = __importDefault(require(\"fs\"));\r\nvar readWavFiles = function (path) {\r\n    return new Promise(function (resolve, reject) {\r\n        fs_1.default.readdir(path, function (err, files) {\r\n            if (err)\r\n                reject(err);\r\n            var fileList = files.filter(function (file) {\r\n                return isExistFile(path + '/' + file) && /.*\\.wav$/.test(file); //絞り込み\r\n            });\r\n            resolve(fileList);\r\n        });\r\n    });\r\n};\r\nexports.readWavFiles = readWavFiles;\r\nvar isExistFile = function (file) {\r\n    try {\r\n        fs_1.default.statSync(file).isFile();\r\n        return true;\r\n    }\r\n    catch (err) {\r\n        if (err.code === 'ENOENT')\r\n            return false;\r\n    }\r\n};\r\nvar sleep = function (msec) { return new Promise(function (resolve) { return setTimeout(resolve, msec); }); };\r\nexports.sleep = sleep;\r\nvar escapeHtml = function (string) {\r\n    if (typeof string !== 'string') {\r\n        return string;\r\n    }\r\n    return string.replace(/[&'`\"<>]/g, function (match) {\r\n        return {\r\n            '&': '&amp;',\r\n            \"'\": '&#x27;',\r\n            '`': '&#x60;',\r\n            '\"': '&quot;',\r\n            '<': '&lt;',\r\n            '>': '&gt;',\r\n        }[match];\r\n    });\r\n};\r\nexports.escapeHtml = escapeHtml;\r\nvar unescapeHtml = function (str) {\r\n    return str\r\n        .replace(/&lt;/g, '<')\r\n        .replace(/&gt;/g, '>')\r\n        .replace(/&quot;/g, '\"')\r\n        .replace(/&#x27;/g, \"'\")\r\n        .replace(/&#x60;/g, '`')\r\n        .replace(/&#044;/g, ',')\r\n        .replace(/&amp;/g, '&');\r\n};\r\nexports.unescapeHtml = unescapeHtml;\r\nvar judgeAaMessage = function (messageList) {\r\n    return messageList.map(function (message) {\r\n        var isAA = false;\r\n        if (config.aamode.condition.length <= message.text.length)\r\n            isAA = true;\r\n        for (var _i = 0, _a = config.aamode.condition.words; _i < _a.length; _i++) {\r\n            var word = _a[_i];\r\n            if (message.text.includes(word))\r\n                isAA = true;\r\n        }\r\n        return __assign(__assign({}, message), { isAA: isAA });\r\n    });\r\n};\r\nexports.judgeAaMessage = judgeAaMessage;\r\n/** 日本語のテキストか */\r\nvar isNihongo = function (message) {\r\n    var reg = new RegExp('.*[ぁ-んァ-ヶ亜-熙ａ-ｚＡ-Ｚ]+.*');\r\n    return reg.test(message);\r\n};\r\nexports.isNihongo = isNihongo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LiveChat = void 0;\r\nvar live_chat_1 = require(\"./live-chat\");\r\nObject.defineProperty(exports, \"LiveChat\", { enumerable: true, get: function () { return live_chat_1.LiveChat; } });\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LiveChat = void 0;\r\nvar events_1 = require(\"events\");\r\nvar axios_1 = __importDefault(require(\"axios\"));\r\nvar parser_1 = require(\"./parser\");\r\nvar util_1 = require(\"../util\");\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('Youtube-chat');\r\n/**\r\n * YouTubeライブチャット取得イベント\r\n */\r\nvar LiveChat = /** @class */ (function (_super) {\r\n    __extends(LiveChat, _super);\r\n    function LiveChat(options, interval) {\r\n        if (interval === void 0) { interval = 5000; }\r\n        var _this = _super.call(this) || this;\r\n        _this.interval = interval;\r\n        /** コメントAPIKey */\r\n        _this.commentApiKey = '';\r\n        /** 自分の取得位置を表すID */\r\n        _this.continuation = '';\r\n        /** 表示済みのコメントID */\r\n        _this.displayedId = {};\r\n        _this.isFirst = true;\r\n        /** 停止要求をされた */\r\n        _this.isStop = false;\r\n        if ('channelId' in options) {\r\n            _this.channelId = options.channelId;\r\n        }\r\n        else if ('liveId' in options) {\r\n            _this.liveId = options.liveId;\r\n        }\r\n        else {\r\n            throw TypeError('Required channelId or liveId.');\r\n        }\r\n        return _this;\r\n    }\r\n    LiveChat.prototype.start = function () {\r\n        this.isFirst = true;\r\n        this.isStop = false;\r\n        this.commentApiKey = '';\r\n        this.continuation = '';\r\n        this.fetchLiveId();\r\n    };\r\n    LiveChat.prototype.fetchLiveId = function () {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, liveRes, e_1, init, e_2;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (this.isStop)\r\n                            return [2 /*return*/];\r\n                        if (!this.channelId) return [3 /*break*/, 6];\r\n                        url = \"https://www.youtube.com/channel/\" + this.channelId + \"/live\";\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 5, , 6]);\r\n                        return [4 /*yield*/, axios_1.default.get(url, { headers: LiveChat.headers })];\r\n                    case 2:\r\n                        liveRes = _b.sent();\r\n                        if (!!liveRes.data.match(/liveChatHeaderRenderer/)) return [3 /*break*/, 4];\r\n                        // 配信が開始してないパターンが考えられるのでリトライ\r\n                        this.emit('error', new Error('Live stream not found'));\r\n                        return [4 /*yield*/, util_1.sleep(2000)];\r\n                    case 3:\r\n                        _b.sent();\r\n                        this.fetchLiveId();\r\n                        return [2 /*return*/];\r\n                    case 4:\r\n                        this.liveId = (_a = liveRes.data.match(/videoId\":\"(.+?)\"/)) === null || _a === void 0 ? void 0 : _a[1];\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        e_1 = _b.sent();\r\n                        // チャンネルID自体が違うのはもうどうしようもないので止める\r\n                        this.emit('error', new Error(\"connection error url = \" + url));\r\n                        return [2 /*return*/];\r\n                    case 6:\r\n                        if (!this.liveId) return [3 /*break*/, 15];\r\n                        _b.label = 7;\r\n                    case 7:\r\n                        _b.trys.push([7, 12, , 14]);\r\n                        return [4 /*yield*/, this.getInitParam()];\r\n                    case 8:\r\n                        init = _b.sent();\r\n                        if (!(init.api && init.continuation)) return [3 /*break*/, 9];\r\n                        this.commentApiKey = init.api;\r\n                        this.continuation = init.continuation;\r\n                        this.observer = setInterval(function () { return _this.fetchChat(); }, this.interval);\r\n                        this.emit('start', this.liveId);\r\n                        return [3 /*break*/, 11];\r\n                    case 9:\r\n                        // 配信ページはあるのに何らかの理由でAPIKeyが取れなかった\r\n                        this.emit('error', new Error(\"failed fetch apikey liveId=\" + this.liveId));\r\n                        return [4 /*yield*/, util_1.sleep(2000)];\r\n                    case 10:\r\n                        _b.sent();\r\n                        this.fetchLiveId();\r\n                        _b.label = 11;\r\n                    case 11: return [3 /*break*/, 14];\r\n                    case 12:\r\n                        e_2 = _b.sent();\r\n                        // 考えられるのは、LiveIdを指定していて、ページが取れたが、isLiveNowがfalseだった時\r\n                        this.emit('error', new Error(e_2.message));\r\n                        return [4 /*yield*/, util_1.sleep(2000)];\r\n                    case 13:\r\n                        _b.sent();\r\n                        this.fetchLiveId();\r\n                        return [3 /*break*/, 14];\r\n                    case 14: return [3 /*break*/, 17];\r\n                    case 15:\r\n                        // 配信が開始してないパターンが考えられるのでリトライ\r\n                        this.emit('error', new Error('Live stream not found'));\r\n                        return [4 /*yield*/, util_1.sleep(2000)];\r\n                    case 16:\r\n                        _b.sent();\r\n                        this.fetchLiveId();\r\n                        _b.label = 17;\r\n                    case 17: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    LiveChat.prototype.stop = function (reason) {\r\n        this.isStop = true;\r\n        if (this.observer) {\r\n            clearInterval(this.observer);\r\n            this.emit('end', reason);\r\n        }\r\n        this.displayedId = {};\r\n    };\r\n    LiveChat.prototype.getInitParam = function () {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, res, isLiveNow, key, continuation;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        url = \"https://www.youtube.com/watch?v=\" + this.liveId;\r\n                        return [4 /*yield*/, axios_1.default.get(url)];\r\n                    case 1:\r\n                        res = _d.sent();\r\n                        try {\r\n                            // 配信中か確認。配信中でなければエラーとみなす\r\n                            isLiveNow = (_a = res.data\r\n                                .match(/isLiveNow\":.*?,/)) === null || _a === void 0 ? void 0 : _a[0].split(':')[1].replace(/\"/g, '').replace(/,/g, '');\r\n                            log.debug(isLiveNow);\r\n                        }\r\n                        catch (e) {\r\n                            log.error(e.message);\r\n                            return [2 /*return*/, { api: '', continuation: '' }];\r\n                        }\r\n                        if (isLiveNow === 'false')\r\n                            throw new Error(\"liveId = \" + this.liveId + \" is not Live Now\");\r\n                        try {\r\n                            key = (_b = res.data\r\n                                .match(/innertubeApiKey\":\".*?\"/)) === null || _b === void 0 ? void 0 : _b[0].split(':')[1].replace(/\"/g, '');\r\n                            log.debug(\"key is \" + key);\r\n                            continuation = (_c = res.data\r\n                                .match(/continuation\":\".*?\"/)) === null || _c === void 0 ? void 0 : _c[0].split(':')[1].replace(/\"/g, '');\r\n                            log.debug(\"initial continuation is \" + continuation);\r\n                            return [2 /*return*/, { api: key, continuation: continuation }];\r\n                        }\r\n                        catch (e) {\r\n                            log.error(e.message);\r\n                            return [2 /*return*/, { api: '', continuation: '' }];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    LiveChat.prototype.fetchChat = function () {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, res, reqBody, con, temp, items, e_3;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        url = \"https://www.youtube.com/youtubei/v1/live_chat/get_live_chat?key=\" + this.commentApiKey;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        reqBody = {\r\n                            context: {\r\n                                client: {\r\n                                    clientName: 'WEB',\r\n                                    clientVersion: '2.20210126.08.02',\r\n                                    timeZone: 'Asia/Tokyo',\r\n                                    utcOffsetMinutes: 540,\r\n                                    mainAppWebInfo: {\r\n                                        graftUrl: \"https://www.youtube.com/live_chat?continuation=\",\r\n                                    },\r\n                                },\r\n                                request: {\r\n                                    useSsl: true,\r\n                                },\r\n                            },\r\n                            continuation: this.continuation,\r\n                        };\r\n                        log.debug(\"POST \" + url);\r\n                        return [4 /*yield*/, axios_1.default\r\n                                .post(url, JSON.stringify(reqBody), { headers: LiveChat.headers })\r\n                                .then(function (data) {\r\n                                return data;\r\n                            })\r\n                                .catch(function (err) {\r\n                                throw new Error(err.message);\r\n                            })];\r\n                    case 2:\r\n                        res = _b.sent();\r\n                        con = parser_1.getContinuation(res.data);\r\n                        if (!con)\r\n                            throw new Error('getContinuation error');\r\n                        log.debug(\"next continuation is \" + con);\r\n                        this.continuation = con;\r\n                        temp = (_a = res.data.continuationContents.liveChatContinuation.actions) !== null && _a !== void 0 ? _a : [];\r\n                        if (temp.length === 0)\r\n                            return [2 /*return*/];\r\n                        if (this.isFirst) {\r\n                            // 初回のみ、actions配列の末尾は入室メッセージみたいなやつなので除外する\r\n                            temp = temp.slice(0, -1);\r\n                        }\r\n                        temp = temp.filter(function (v) {\r\n                            var messageRenderer = parser_1.actionToRenderer(v);\r\n                            return messageRenderer !== null && messageRenderer;\r\n                        });\r\n                        items = temp.map(function (v) { return parser_1.parseData(v); });\r\n                        // 初回取得の場合は初期データとして出力\r\n                        items.forEach(function (v) {\r\n                            if (v) {\r\n                                if (_this.isFirst) {\r\n                                    _this.emit('firstComment', v);\r\n                                }\r\n                                else {\r\n                                    // 表示済みならスキップ\r\n                                    if (!_this.displayedId[v.id]) {\r\n                                        _this.emit('comment', v);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        this.isFirst = false;\r\n                        // 末尾のidを取得\r\n                        log.info(\"items = \" + items.length);\r\n                        items.forEach(function (v) {\r\n                            var id = v === null || v === void 0 ? void 0 : v.id;\r\n                            if (id)\r\n                                _this.displayedId[id] = true;\r\n                        });\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_3 = _b.sent();\r\n                        log.error(e_3);\r\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                        if (res) {\r\n                            log.error(JSON.stringify(res.data));\r\n                        }\r\n                        this.emit('error', new Error(\"Error occured at fetchchat url=\" + url));\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    LiveChat.prototype.on = function (event, listener) {\r\n        return _super.prototype.on.call(this, event, listener);\r\n    };\r\n    LiveChat.headers = {\r\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36',\r\n        'Content-Type': 'application/json',\r\n    };\r\n    return LiveChat;\r\n}(events_1.EventEmitter));\r\nexports.LiveChat = LiveChat;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getContinuation = exports.parseData = exports.usecToTime = exports.actionToRenderer = void 0;\r\nvar electron_log_1 = __importDefault(require(\"electron-log\"));\r\nvar log = electron_log_1.default.scope('Youtube-chat');\r\nvar parseThumbnailToImageItem = function (data, alt) {\r\n    var thumbnail = data.pop();\r\n    if (thumbnail) {\r\n        return {\r\n            url: thumbnail.url,\r\n            width: thumbnail.width,\r\n            height: thumbnail.height,\r\n            alt: alt,\r\n        };\r\n    }\r\n    return;\r\n};\r\nvar parseEmojiToImageItem = function (data) {\r\n    return parseThumbnailToImageItem(data.emoji.image.thumbnails, data.emoji.shortcuts.shift());\r\n};\r\nvar parseMessages = function (runs) {\r\n    return runs.map(function (run) {\r\n        var _a;\r\n        if ('text' in run) {\r\n            if ((_a = run === null || run === void 0 ? void 0 : run.navigationEndpoint) === null || _a === void 0 ? void 0 : _a.urlEndpoint.url) {\r\n                var tubeUrl = run.navigationEndpoint.urlEndpoint.url.replace(/^\\/redirect\\?/, '');\r\n                var parsed = tubeUrl.split('&').filter(function (str) { return str.match(/^q=/); });\r\n                var orgUrl = decodeURIComponent(parsed[0].replace(/^q=/, ''));\r\n                return { text: orgUrl };\r\n            }\r\n            else {\r\n                return run;\r\n            }\r\n        }\r\n        else {\r\n            // 絵文字を画像に置換\r\n            return parseEmojiToImageItem(run);\r\n        }\r\n    });\r\n};\r\nvar actionToRenderer = function (action) {\r\n    if (!action.addChatItemAction) {\r\n        return null;\r\n    }\r\n    var item = action.addChatItemAction.item;\r\n    if (item.liveChatTextMessageRenderer) {\r\n        return item.liveChatTextMessageRenderer;\r\n    }\r\n    else if (item.liveChatPaidMessageRenderer) {\r\n        return item.liveChatPaidMessageRenderer;\r\n    }\r\n    else if (item.liveChatPaidStickerRenderer) {\r\n        return item.liveChatPaidStickerRenderer;\r\n    }\r\n    else {\r\n        return item.liveChatMembershipItemRenderer;\r\n    }\r\n};\r\nexports.actionToRenderer = actionToRenderer;\r\nvar usecToTime = function (usec) {\r\n    return Math.floor(Number(usec) / 1000);\r\n};\r\nexports.usecToTime = usecToTime;\r\nvar parseData = function (data) {\r\n    var messageRenderer = exports.actionToRenderer(data);\r\n    if (messageRenderer === null) {\r\n        return null;\r\n    }\r\n    var message = [];\r\n    if ('message' in messageRenderer) {\r\n        message = messageRenderer.message.runs;\r\n    }\r\n    else if ('headerSubtext' in messageRenderer) {\r\n        message = messageRenderer.headerSubtext.runs;\r\n    }\r\n    var ret = {\r\n        id: messageRenderer.id,\r\n        author: {\r\n            name: messageRenderer.authorName.simpleText,\r\n            thumbnail: parseThumbnailToImageItem(messageRenderer.authorPhoto.thumbnails, messageRenderer.authorName.simpleText),\r\n            channelId: messageRenderer.authorExternalChannelId,\r\n        },\r\n        message: parseMessages(message),\r\n        membership: Boolean('headerSubtext' in messageRenderer),\r\n        isOwner: false,\r\n        timestamp: exports.usecToTime(messageRenderer.timestampUsec),\r\n    };\r\n    if (messageRenderer.authorBadges) {\r\n        var badge = messageRenderer.authorBadges[0].liveChatAuthorBadgeRenderer;\r\n        if (badge.customThumbnail) {\r\n            ret.author.badge = {\r\n                thumbnail: parseThumbnailToImageItem(badge.customThumbnail.thumbnails, badge.tooltip),\r\n                label: badge.tooltip,\r\n            };\r\n        }\r\n        else {\r\n            ret.isOwner = true;\r\n        }\r\n    }\r\n    if ('sticker' in messageRenderer) {\r\n        ret.superchat = {\r\n            amount: messageRenderer.purchaseAmountText.simpleText,\r\n            color: messageRenderer.backgroundColor,\r\n            sticker: parseThumbnailToImageItem(messageRenderer.sticker.thumbnails, messageRenderer.sticker.accessibility.accessibilityData.label),\r\n        };\r\n    }\r\n    else if ('purchaseAmountText' in messageRenderer) {\r\n        ret.superchat = {\r\n            amount: messageRenderer.purchaseAmountText.simpleText,\r\n            color: messageRenderer.bodyBackgroundColor,\r\n        };\r\n    }\r\n    return ret;\r\n};\r\nexports.parseData = parseData;\r\nvar getContinuation = function (body) {\r\n    var _a, _b, _c, _d;\r\n    var continuation = '';\r\n    try {\r\n        continuation = (_b = (_a = body.continuationContents.liveChatContinuation.continuations[0].invalidationContinuationData) === null || _a === void 0 ? void 0 : _a.continuation) !== null && _b !== void 0 ? _b : '';\r\n    }\r\n    catch (e) {\r\n        // なんかまた知らないパターンが来た時用\r\n        log.warn(e);\r\n    }\r\n    if (continuation)\r\n        return continuation;\r\n    try {\r\n        continuation = (_d = (_c = body.continuationContents.liveChatContinuation.continuations[0].timedContinuationData) === null || _c === void 0 ? void 0 : _c.continuation) !== null && _d !== void 0 ? _d : '';\r\n    }\r\n    catch (e) {\r\n        //\r\n        log.warn(e);\r\n    }\r\n    if (continuation)\r\n        return continuation;\r\n    // なんやかんやしても見つからなかった\r\n    if (!continuation)\r\n        throw new Error('continuation not found!');\r\n};\r\nexports.getContinuation = getContinuation;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACppxhvnpjjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzzsourceRoot":""}